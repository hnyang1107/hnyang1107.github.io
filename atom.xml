<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FreeMind</title>
  
  <subtitle>「静水深流」</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yanghn.com/"/>
  <updated>2020-01-08T15:49:11.800Z</updated>
  <id>https://yanghn.com/</id>
  
  <author>
    <name>H.N.Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>支持向量机(Support Vector Machine)：原理与推导</title>
    <link href="https://yanghn.com/posts/33807/"/>
    <id>https://yanghn.com/posts/33807/</id>
    <published>2020-01-04T12:23:08.000Z</published>
    <updated>2020-01-08T15:49:11.800Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A powerful discriminative classifier defined by a separating hyperplane”</p><p><img src="" alt="" style="width:85%"></p><a id="more"></a><div class="note primary"><h3><span id="文章目录">文章目录</span></h3><ul><li><a href="#1-svm-基本型">1. SVM 基本型</a><ul><li><a href="#11-超平面与线性可分">1.1 超平面与线性可分</a></li><li><a href="#12-函数间隔与几何间隔">1.2 函数间隔与几何间隔</a></li><li><a href="#13-利用间隔最大化推导基本型">1.3 利用间隔最大化推导基本型</a></li></ul></li><li><a href="#2-hard-margin-svm-求解">2. Hard Margin SVM 求解</a><ul><li><a href="#21-支持向量与间隔边界">2.1 支持向量与间隔边界</a></li><li><a href="#22-lagrange-duality">2.2 Lagrange Duality</a></li><li><a href="#23-kkt-条件与支持向量">2.3 KKT 条件与支持向量</a></li></ul></li><li><a href="#参考资料">参考资料</a></li></ul></div><h2><span id="1-svm-基本型">1. SVM 基本型</span></h2><h3><span id="11-超平面与线性可分">1.1 超平面与线性可分</span></h3><p>考虑的是一个两类的分类问题，数据点用 $\boldsymbol{x}$ 来表示，这是一个 $n$ 维向量，而类别用 $y$ 来表示，可以取 $0$ 或者 $-1$ ，分别代表两个不同的类（不同于 Logistics Regression 的 $0,1$ 有概率意义，这里只是为了方便 SVM 的推导）. 一个线性分类器就是要在 $n$ 维的数据空间中找到一个 $n-1$ 维的<strong>超平面</strong>，其方程可以表示为<br>$$w^{T}\boldsymbol{x}+b=0\tag{1.1}$$</p><blockquote><p>一般我们的向量没有加以说明都是指的列向量，所以这里乘法指的是矩阵乘法</p></blockquote><p>我们希望这个超平面能够把这两类数据完美的分开来，一边函数值大于 $0$ 为一类一边小于 $0$ 为一类，不存在等于 $0$ 的那一类，如下图所示</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-04-2020-01-04-131029.JPG" width="50%" height="80%"></p><p>图中为二维空间的点，我们的目标是找到一个一维空间的超平面（直线）将两类样本分开，这个超平面有两个基本性质：<br></p><div class="note warning no-icon"><ul><li>超平面乘上不为 $0$ 的系数 $\lambda$ 也是同一个超平面 $\lambda (w^{T}\boldsymbol{x}+b)=0$</li><li>$w$ 是超平面的法向量，这个法向量的方向会在平面的任意一侧</li></ul></div><br>第二点对后面推导几何间距有用，这里给出一个简单的证明：对任意超平面上的两点 $\boldsymbol{x_1},\boldsymbol{x_2}$ 都会有 $w^{T}(\boldsymbol{x_1}-\boldsymbol{x_2})=0$ 成立，也就是说对于任意属于超平面的向量 $(\boldsymbol{x_1}-\boldsymbol{x_2})$ 都与 $w$ 正交，所以 $w$ 是超平面的法向量. 对于第一点的证明是显然的，单纯看超平面我们没有办法去确定 $w,b$ 似乎需要做一些归一化操作，所以我们的目标是定义和找到合适的 $w,b$ 来达到我们分离两类样本的目的.<p></p><h3><span id="12-函数间隔与几何间隔">1.2 函数间隔与几何间隔</span></h3><p>从几何直观上来说，由于超平面是用于分隔两类数据的，越接近超平面的点越“难”分隔，因为如果超平面稍微转动一下，它们就有可能跑到另一边去。反之，如果是距离超平面很远的点，例如图中的右上角或者左下角的点，则很容易分辩出其类别，所以点离离超平面越远则确信度越高，这里有两种方式来刻画离超平面的远近，数值上 $|w^{T}\boldsymbol{x}+b|$ 可以刻画，在超平面上为 $0$，这就是<strong>样本点的函数间隔(functional margin)</strong>的概念，对于样本 $i$ ，函数间隔可以方便的写成<br>$$\hat{\gamma}_i = y_i(w^{T}\boldsymbol{x}+b)\tag{1.2}$$<br>也就是说把函数值 $f(\boldsymbol{x}) = (w^{T}\boldsymbol{x}+b)$ 小于 $0$ 的定义为 $-1$ 类，大于 $0$ 的定义为 $1$ 类，对于所有样本都可以求得其函数间隔，对于整体我们只关心最小的那个，因为越大的事分类的越好，控制最小的那个来控制靠近超平面的样本点，所以把<strong>训练集的函数间隔</strong>定义为<br>$$\hat{\gamma}=\min_{i=1,\cdots,m}\hat{\gamma}_{i}\tag{1.3}$$<br>但是，在 1.1 节中说过，超平面不加限定其系数可以任意取，所以函数间隔可以取任意大小，所以我们需要给 $w$ 加上某些约束($W$ 定下来 $b$ 就确定了) 如进行归一化 $\|w\|=1$，实际上这样归一化后的结果就是<strong>几何间隔(geometric margin)</strong><br>直观上，不管超平面的形式如何，点到超平面的距离是确定的，还下图所示，现推导点 $\boldsymbol{x}$ 到超平面的距离 $\gamma$：<br></p><div class="note info"><p><strong>几何距离的推导：</strong><br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-04-144455.png" width="25%" height="100%"></p><p>假设 $\boldsymbol{x}$ 在超平面的投影为 $\boldsymbol{x}_{0}$ 由于 $w$ 是法向量，故有 $$\boldsymbol{x}=\boldsymbol{x}_{0}+\gamma\frac{w}{\|w\|}\tag{1.4}$$<br>等式两边同时取函数 $f(\boldsymbol{x}) = (w^{T}\boldsymbol{x}+b)$，注意到 $f(\boldsymbol{x}_0)=0,\|w\|^2=w^Tw$，可得<br>$$\gamma=\frac{|w^{T} \boldsymbol{x}+b|}{\|w\|}=\frac{yf(\boldsymbol{x})}{\|w\|}=\frac{\hat{\gamma}}{\|w\|}\tag{1.5}$$</p></div><br>这也是就是说几何间距就是函数间距归一化的结果，这里要加上绝对值，也就是乘上其类别标记 $y$，因为 $\boldsymbol{x_0}$ 与 $w$ 不一定在同一侧，这种几何间距与超平面的比例系数无关（可自行验证）. 同样我们把样本点的最小几何间距定义为<strong>训练集的几何间距</strong>：<br>$${\gamma}=\min_{i=1,\cdots,m}{\gamma}_{i}\tag{1.6}$$<p></p><h3><span id="13-利用间隔最大化推导基本型">1.3 利用间隔最大化推导基本型</span></h3><p>直觉上，我们希望所有的点离超平面都足够的远，一方面是增加分类的置信度，另一方面也是增加数据的扰动性（超平面改变一点角度离超平面很近的点分类可能完全改变），也就是说我们优化的目标就是最大化训练样本的间隔，由于函数间隔的不确定性，所以我们选择最大化训练样本的几何间隔，即</p><p>$$\begin{aligned}<br>&amp;\max_{w, b}\min_{\boldsymbol{x}_{i}}\frac{y_i(w^{T}\boldsymbol{x}_{i}+b)}{\|w\|}\\<br>&amp;\text{ s.t. }\quad y_{i}\left(w^T \cdot \boldsymbol{x}_{i}+b\right)&gt;0, \quad i=1,2, \cdots, m\end{aligned}\tag{1.7}$$<br>上式约束条件严格大于 $0$，表示完全分类准确，此时这种间隔称为<strong>硬间隔(soft margin)</strong>，软间隔与硬间隔问题在后面会再次详细说明.</p><p>观察上式的目标函数，$\|w\|$可以放在 $\min$ 外，而约束条件是一个函数间隔，刚刚说过可以取任意值，为了方便，我们不妨设$\min_{\boldsymbol{x}_{i}}y_i(w^{T}\boldsymbol{x}_{i}+b)=r&gt;0$，我们可以令 $r=1$，也就是训练集的函数距离固定成 $\hat{\gamma}=1$, 则优化问题可以写成<br>$$\begin{aligned}<br>&amp;\max_{w, b}\frac{1}{\|w\|}\\<br>&amp;\text{ s.t. }\quad y_{i}\left(w^T \cdot \boldsymbol{x}_{i}+b\right) \geqslant 1, \quad i=1,2, \cdots, m\end{aligned}\tag{1.8}$$</p><p>把目标函数改一下，变成易于求导的形式：<br>$$\begin{aligned}<br>&amp;\min_{w, b}\frac{1}{2}{\|w\|^{2}}=\frac{1}{2}w^Tw\\<br>&amp;\text{ s.t. }\quad y_{i}\left(w^T \cdot \boldsymbol{x}_{i}+b\right) \geqslant 1, \quad i=1,2, \cdots, m\end{aligned}\tag{1.9}$$<br>上面的 $\frac{1}{2}$ 只是为了方便求导后消去系数，这样我们通过固定函数间距去最小化几何间距，得到 <strong>SVM 的基本型</strong></p><h2><span id="2-hard-margin-svm-求解">2. Hard Margin SVM 求解</span></h2><h3><span id="21-支持向量与间隔边界">2.1 支持向量与间隔边界</span></h3><p>可以明显地看出来，它是一个凸优化问题，或者更具体地说，它是一个二次优化问题——目标函数是二次的，约束条件是线性的。这个问题可以用任何现成的 <a href="https://en.wikipedia.org/wiki/Quadratic_programming" target="_blank" rel="noopener">QP (Quadratic Programming)</a> 的优化包进行求解. 但是维数很高的话有一种更高效的方式来处理，这就是通过 (<a href="https://en.wikipedia.org/wiki/Duality_optimization#The_strong_Lagrangian_principle:_Lagrange_duality" target="_blank" rel="noopener">Lagrange Duality</a>) 变换到对偶变量 (dual variable) 的优化问题之后，可以找到一种更加有效的方法来进行求解——这也是在神经网络之前 SVM 盛行的一大原因，通常情况下这种方法比直接使用通用的 QP 优化包进行优化要高效得多，在求解之前，我们先来看为什么这个模型叫做支持向量机. 首先，根据刚刚的规定，$\hat{\gamma}=1$，也就是说边界上的线要满足 $y_i(w^{T}\boldsymbol{x}_{i}+b)=1$，所以边界一定是 $w^{T}\boldsymbol{x}_{i}+b=\pm 1$</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-05-092024.png" width="40%" height="100%"></p><p>我们要找的超平面与边界平行，而且一定处于边界中间的那个平面，这是因为最优超平面一旦靠近某一边界整个训练集的几何间距就会变小，但实际上我们是要最大化这个几何间距，所以边界决定了超平面的位置，边界又是由一些少量的点决定，边界外的点对整个模型求解没有影响，我们把边界上的点叫做<strong>支持向量</strong>，$H_1$ 与 $H_2$ 之间的距离成为间隔，也就是最大化这个 Gap 之间的距离.</p><p>这个优化问题有一个基本结论：<br></p><div class="note warning"><p><strong>最大间隔分离超平面存在唯一性</strong>[1]<br>若数据集 $T$ 线性可分，则可将训练数据集中的样本点完全正确分开且分开的最大超平面存在唯一</p></div><p></p><h3><span id="22-lagrange-duality">2.2 Lagrange Duality</span></h3><p>我们把基本型叫做原问题(primal problem)，每一个约束条件加上一个 Lagrange multiplier，目标是把有约束的优化变成对于 $w,b$ 无约束的优化：<br>$$\mathcal{L}(w, b, \alpha)=\frac{1}{2}w^{T}w+\sum_{i=1}^{m} \alpha_{i}\left(1-y_{i}\left(w^{T} \boldsymbol{x}_{i}+b\right)\right)\tag{2.1}$$然后$$\begin{aligned}<br>&amp;\min_{w, b}\max_{\alpha_{i}}\mathcal{L}(w, b, \alpha)\\<br>&amp;\text{ s.t. }\alpha_{i}\geqslant 0\end{aligned}\tag{2.2}$$<br>这种方法就是将将约束融合到目标函数里，因为现在 $w,b$ 无约束，我们可以把 $w,b$ 的取值分为两部分$P_{1},P_{2}$，$P_{1}$ 满足 $1-w^{T}\boldsymbol{x}_{i}+b&gt;0$ 和 $P_2$ 满足 $1-w^{T}\boldsymbol{x}_{i}+b\leqslant0$，因为我们要在调整 $\alpha_{i}$ 来最大化 $\mathcal{L}$，在 $P_1$ 处显然最大值为 $\infty$，最后我们要去最小化一个含有无穷的项，显然在 $P_1$ 部分是找不到的，所以自然而然的最优解落在了 $P_2$，也就对应了原问题的约束，通过这种方法就可以把有约束的优化变成无约束的优化.</p><p>然后这里交换最大最小的顺序，根据对偶性，原问题的对偶问题是极大极小问题，一般来说 $\min\max\leqslant\max\min$ 的，直观上也很好理解，最大值中最小的一个总也比最小值中最大的一个要大，但是有的时候是相等的，具体来说，就是要满足 <a href="https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions" target="_blank" rel="noopener">Slater</a> 条件，详细可以参考博文：<a href="https://yanghn.com/posts/33591">机器学习中的数学基础</a>，我们这里的问题是满足 Slater 定理的，因此现在我们便转化为求解第二个问题：$$\begin{aligned}<br>&amp;\max_{\alpha_{i}}\min_{w, b}\mathcal{L}(w, b, \alpha)\\<br>&amp;\text{ s.t. }\alpha_{i}\geqslant 0\end{aligned}\tag{2.3}$$ 这样的话先考虑 $\min$ 问题就变成彻底无约束优化，现在需要求 $\mathcal{L}(w, b, \alpha)$ 对 $w,b$ 的最小，由于是凸的，所以直接求极小值：<br>$$\nabla_W \mathcal{L}(w,b,\alpha) = w - \sum_{i=1}^m \alpha_i y_i \boldsymbol{x}_i = 0 \implies w= \sum_{i=1}^m \alpha_i y_i \boldsymbol{x}_i\tag{2.4}$$ 注意到这里的 $w$ 是向量，要对其求<a href="https://yanghn.com/posts/33591/#14-%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86">向量的梯度</a>，然后对 $b$ 求偏导<br>$$\nabla_b \mathcal{L}(w,b,\alpha) = - \sum_{i=1}^m \alpha_i y_i = 0 \implies \sum_{i=1}^m \alpha_i y_i = 0 \tag{2.5}$$ (2.5) 式子不含 $w,b$，所以变成了我们极大问题的约束条件，把 (2.4) 式带回 (2.1) 加上负号转化为求最小值问题，<br>$$\begin{aligned}<br>\max_{\alpha}&amp;\frac 1 2 \sum_{i=1}^m \sum_{j=1}^m \alpha_i \alpha_j y_i y_j \boldsymbol{x}_i^T \boldsymbol{x}_j \ - \ \sum_{i=1}^m \alpha_i\\<br>\text{ s.t. }&amp;\alpha_{i}\geqslant 0,\sum_{i=1}^m \alpha_i y_i = 0<br>\end{aligned}\tag{2.6}$$ 其中具体细节的推导可以参考资料[4]，(2.6) 式是一个约束条件相对比较简单的二次规划问题<br><mark>TODO:补充解的形式<mark></mark></mark></p><h3><span id="23-kkt-条件与支持向量">2.3 KKT 条件与支持向量</span></h3><p>我们再来看拉格朗日函数的 KKT 条件，(2.1) 的 KKT 条件为：</p><h2><span id="参考资料">参考资料</span></h2><p><strong>[1]</strong> 统计学习方法, 李航, <em>清华大学出版社</em>, 第二版, 2019<br><strong>[2]</strong> 支持向量机: Maximum Margin Classifier, 张驰原, <em>pluskid.org</em>, 2010, [<a href="http://blog.pluskid.org/?page_id=683" target="_blank" rel="noopener">Link</a>]<br><strong>[3]</strong> 机器学习, 周志华，<em>清华大学出版社</em>, 第一版, 2016[<a href="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-05-%E5%91%A8%E5%BF%97%E5%8D%8E-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.pdf" target="_blank" rel="noopener">Link</a>]<br><strong>[4]</strong> 机器学习-白板推导系列(六)-支持向量机SVM(Support Vector Machine),shuhuai008, <em>bilibili.com</em>, 2018 [<a href="https://www.bilibili.com/video/av28186618" target="_blank" rel="noopener">Link</a>][<a href="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-05-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA.pdf" target="_blank" rel="noopener">PDF</a>]</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A powerful discriminative classifier defined by a separating hyperplane”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; style=&quot;width:85%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://yanghn.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CS229" scheme="https://yanghn.com/tags/CS229/"/>
    
      <category term="机器学习" scheme="https://yanghn.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据库与 MySQL 笔记</title>
    <link href="https://yanghn.com/posts/9977/"/>
    <id>https://yanghn.com/posts/9977/</id>
    <published>2019-12-28T08:09:38.000Z</published>
    <updated>2020-01-04T06:48:21.064Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“Get the dolphin up to speed”</p><a id="more"></a><div class="note primary"><h3><span id="文章目录">文章目录</span></h3><ul><li><a href="#1-数据库相关概念">1. 数据库相关概念</a></li><li><a href="#2-连接数据库">2. 连接数据库</a></li><li><a href="#3-sql-基本命令">3. SQL 基本命令</a></li><li><a href="#4-mysql-语法规范">4. MySQL 语法规范</a></li><li><a href="#5-dql-data-query-language">5. DQL (Data Query Language)</a><ul><li><a href="#51-基础查询">5.1 基础查询</a></li><li><a href="#52-条件查询">5.2 条件查询</a></li><li><a href="#53-排序查询">5.3 排序查询</a></li><li><a href="#54-分组查询">5.4 分组查询</a></li><li><a href="#55-连接查询多表查询">5.5 连接查询（多表查询）</a><ul><li><a href="#551-sql92-标准等值连接-label-successe71-72">5.5.1 SQL92 标准：等值连接 <span class="label success">[E71-72]</span></a></li><li><a href="#552-sql92-标准非等值连接-label-successe73">5.5.2 SQL92 标准：非等值连接 <span class="label success">[E73]</span></a></li><li><a href="#553-sql92-标准自连接-label-successe74">5.5.3 SQL92 标准：自连接 <span class="label success">[E74]</span></a></li></ul></li></ul></li><li><a href="#6-dml-data-manipulation-language">6. DML (Data Manipulation Language)</a></li><li><a href="#7-ddl-data-define-language">7. DDL (Data Define Language)</a></li><li><a href="#8-tcl-transaction-control-language">8. TCL (Transaction Control Language)</a></li><li><a href="#9-sql-常用函数">9. SQL 常用函数</a><ul><li><a href="#91-单行函数">9.1 单行函数</a><ul><li><a href="#911-字符函数">9.1.1 字符函数</a></li><li><a href="#912-数学函数">9.1.2 数学函数</a></li><li><a href="#913-日期函数">9.1.3 日期函数</a></li><li><a href="#914-其他函数">9.1.4 其他函数</a></li><li><a href="#915-流程控制函数">9.1.5 流程控制函数</a></li></ul></li><li><a href="#92-分组函数统计函数">9.2 分组函数（统计函数）</a></li></ul></li><li><a href="#参考资料">参考资料</a></li></ul></div><h2><span id="1-数据库相关概念">1. 数据库相关概念</span></h2><ul><li><strong>DB</strong>: 数据库（database） 存储数据的“仓库”，保存了一系列有组织的数据</li><li><strong>DBMS</strong>: 数据库管理系统（Database Management System）用于管理DB中的数据，数据库是通过DBMS创建和操作的容器，可分为两类：<blockquote><p>1.基于共享文件系统（Access）<br>2.基于客户机 [mysql] -服务端 [mysqld]（MySQL、Oracle ）(数据安装在服务端)</p></blockquote></li><li><strong>SQL</strong>: 结构化查询语言（Structure Query Language）专门用来与数据库通信的语言<blockquote><p>不是某个特定数据库供应商专有的语言，几乎所有 DBMS 都支持 SQL</p></blockquote></li></ul><h2><span id="2-连接数据库">2. 连接数据库</span></h2><ul><li><code>mysql -h (host) + -P (port) + -u (user) + -p (passport)</code></li></ul><h2><span id="3-sql-基本命令">3. SQL 基本命令</span></h2><ul><li><strong>查看当前所有数据库</strong>：<code>SHOW DATABASE;</code></li><li><strong>打开指定的库</strong>：<code>USE 库名;</code></li><li><strong>查看当前库的所有表</strong>：<code>SHOW TABLES;</code></li><li><strong>查看其他库的所有表</strong>：<code>SHOW TABLES FROM 库名;</code></li><li><p><strong>创建表</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    列名 列类型,</span><br><span class="line">    列名 列类型,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>查看表结构</strong>：<code>desc 表名;</code></p></li><li><strong>查询当前操作的数据库</strong>：<code>SELECT DATABASE();</code></li><li><strong>查看服务器版本</strong>：<code>SELECT VERSION();</code></li></ul><h2><span id="4-mysql-语法规范">4. MySQL 语法规范</span></h2><ul><li>不区分大小写，建议关键字大写，表名列名小写</li><li>每条命令用分号结尾</li><li>缩进换行不影响代码运行</li><li>一个空格两个空格是有区别的</li><li>相对宽容，不是没报错说明语法正确，要看具体的值</li><li>注释：<ul><li>单行注释：<code>#注释内容</code> 或 <code>-- 注释内容</code></li><li>多行注释：<code>/* 注释内容 */</code></li></ul></li></ul><h2><span id="5-dql-data-query-language">5. DQL (Data Query Language)</span></h2><h3><span id="51-基础查询">5.1 基础查询</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">        查询列表 </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">        表名;</span><br></pre></td></tr></table></figure><ul><li><strong>查询表中的单个字段</strong>：<code>SELECT last_name FROM employees</code></li><li><p><strong>查询表中的多个字段</strong>： <code>SELECT last_name,salary FROM employees</code></p><blockquote><p>字段顺序不需要和表中一致</p></blockquote></li><li><strong>查询表中所有字段</strong>：<code>SELECT * FROM employees</code></li><li><p><strong>查询常量值</strong>：<code>SELECT 100</code>、<code>SELECT &#39;job&#39;</code></p><blockquote><p>SQL 中不区分字符串和字符，统称为字符型</p></blockquote></li><li><p><strong>查询表达式</strong>：<code>SELECT 100%98</code></p></li><li><strong>查询函数</strong>：<code>SELECT VERSION();</code></li><li><p><strong>起别名</strong>：<code>SELECT last_name AS 姓;</code>（AS 紧跟着字段，可以省略成空格）</p><div class="note warning"><p><strong>注意</strong>：</p><ul><li>可以对字段起别名，也可以对表名起别名</li><li>别名相当于把原来字段做了替换，原来名称不再有效</li></ul></div></li><li><p><strong>去重</strong>：<code>SELECT DISTINCT department_id FROM employees</code></p><div class="note warning icon"><p><strong>+ 号作用：</strong></p><ul><li><code>SELECT 100+90</code> 两个操作数都为数值型，加法运算</li><li><code>SELECT &#39;100&#39;+90</code> [190] 只要其中一个为字符型，试图将字符型转换成数值型，如果转换成功，继续做加法运算</li><li><code>SELECT &#39;100&#39;+90</code> [90] 如果转换失败，将字符型数值转换成 0</li><li><code>SELECT null+10</code> [null] 其中一方为 null，结果为 null</li></ul></div></li></ul><h3><span id="52-条件查询">5.2 条件查询</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">        查询列表 <span class="comment">-- 3</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">        表名 <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">        筛选条件; <span class="comment">-- 2</span></span><br></pre></td></tr></table></figure><ul><li><strong>按条件表达式筛选</strong><ul><li>条件运算符：&gt; &lt; = != (&lt;&gt;) &gt;= &lt;=</li></ul></li><li><strong>按逻辑运算符</strong><ul><li>逻辑运算符：AND OR NOT</li></ul></li><li><p><strong>模糊查询</strong>：</p><ul><li><p><code>LIKE</code>: 包含某些字符，一般和统配符搭配：</p><ul><li><code>%</code> 任意多个字符，包含 0 个字符</li><li><code>_</code> 任意单个字符</li></ul><div class="note info"><p><strong>在 5.5 版本以上，LIKE 也可以用于数值型数据</strong>:</p></div></li><li><p><code>BETWEEN 100 AND 200</code>：找到 100 到 200 之间的值，包含边界值，边界值不能颠倒</p></li><li><p><code>IN (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</code>: 判断某字段是否属于 in 列表中的某一项，in 列表的值类型必须一致或兼容，不能包含通配符</p><blockquote><p>兼容： 类型可以互相转化，例如 123 与 ‘123’</p></blockquote></li><li><p><code>IS NULL</code>,<code>IS NOT NULL</code> : 判断是否为 NULL</p><div class="note info"><p><strong>等于 = 、安全等于 &lt;=&gt;、与 IS</strong>:<br>等于 = 用来判断普通的数值，不能判断 NULL<br>IS 只能用来判断 NULL<br>安全等于 &lt;=&gt; 既可以 判断 NULL，又可以判断普通的数值，但可读性较低</p></div></li></ul></li></ul><h3><span id="53-排序查询">5.3 排序查询</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">        查询列表 </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">        表名 </span><br><span class="line">[<span class="keyword">WHERE</span>]</span><br><span class="line">        筛选条件 </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">        排序列表<span class="number">1</span> [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], 排序列表<span class="number">2</span> [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]; (不写默认 ASC)</span><br></pre></td></tr></table></figure><ul><li><code>ASC</code> 表示升序，<code>DESC</code> 表示降序</li><li><code>ORDER BY</code> 子句中支持单个字段、多个字段、表达式、函数、别名</li><li><code>ORDER BY</code> 子句一般是放在查询语句的最后面， <code>LIMIT</code> 子句除外</li></ul><h3><span id="54-分组查询">5.4 分组查询</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">        查询列表或表达式, group_function(<span class="keyword">column</span>)</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">        表名 </span><br><span class="line">[<span class="keyword">WHERE</span>]</span><br><span class="line">        筛选条件 </span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>]</span><br><span class="line">        分组条件<span class="number">1</span>, 分组条件<span class="number">2</span>（可以是字段，也可以是某字段的单行函数，没有顺序）</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span>]</span><br><span class="line">        排序列表<span class="number">1</span> [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], 排序列表<span class="number">2</span> [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]; (不写默认 ASC)</span><br></pre></td></tr></table></figure><ul><li>分组之前的列筛选，可以用 <code>WHERE</code></li><li><code>WHERE</code> 关键字无法与聚合函数一起使用，对 <code>GROUP BY</code> 之后的新表进行筛选，应该用在 <code>GROUP BY</code> 之后的 <span class="label warning">HAVING</span></li><li><code>HAVING</code> 只是对这种情况使用，若果有其它情况要多次筛选，用 <code>WHERE AND</code></li><li>对新出现的字段进行筛选 (如<code>MAX(salary)</code>) 要用 <code>HAVING</code></li><li>分组函数作条件肯定放在 <code>HAVING</code> 中</li><li>能放在 <code>GROUP</code> 前面(<code>WHERE</code>)尽量放前面，而不是选择放在后面的 <code>HAVING</code>，这样性能更优</li><li>先考虑查什么，再写基本查询框架，再考虑筛选条件放哪里</li></ul><h3><span id="55-连接查询多表查询">5.5 连接查询（多表查询）</span></h3><ul><li>同时查询来源于多个表的多个字段，没有限定条件结果则会成为<strong>笛卡尔积</strong>的形式</li><li>加上<code>WHERE</code>条件之后，在笛卡尔乘积表里面进行筛选</li><li><code>FROM</code> 多个表没有顺序关系，只是告诉系统字段来自于这些表，如果有相同字段则要加上前缀区分</li></ul><h4><span id="551-sql92-标准等值连接-e71-72">5.5.1 SQL92 标准：等值连接 <span class="label success">[E71-72]</span></span></h4><ul><li>多表等值连接的结果为多表的交集部分</li><li>$n$ 表连接至少需要 $n-1$ 个连接条件</li><li>多表的顺序没有要求</li><li>可以给表取别名减少代码冗余</li><li>可以配合其他子句使用</li></ul><h4><span id="552-sql92-标准非等值连接-e73">5.5.2 SQL92 标准：非等值连接 <span class="label success">[E73]</span></span></h4><ul><li>此时 <code>WHERE</code> 后面不是等于，一般是判断属于两个值之间</li></ul><h4><span id="553-sql92-标准自连接-e74">5.5.3 SQL92 标准：自连接 <span class="label success">[E74]</span></span></h4><ul><li>一张表的某两列有逻辑关系，可以看做自己和自己的等值连接</li><li>这个时候用别名避免歧义</li><li><span class="label danger">TODO E75</span></li></ul><h2><span id="6-dml-data-manipulation-language">6. DML (Data Manipulation Language)</span></h2><h2><span id="7-ddl-data-define-language">7. DDL (Data Define Language)</span></h2><h2><span id="8-tcl-transaction-control-language">8. TCL (Transaction Control Language)</span></h2><h2><span id="9-sql-常用函数">9. SQL 常用函数</span></h2><h3><span id="91-单行函数">9.1 单行函数</span></h3><div class="note info"><p>对整个列操作，一列作为输入，一列作为输出</p></div><h4><span id="911-字符函数">9.1.1 字符函数</span></h4><ul><li><p><strong>LENGTH</strong>: 获取参数值的字节个数</p><blockquote><p>一个汉字占三个字节 (utf8) 两个字节 (gbk)，用 <code>SHOW VARIABLES LIKE &#39;%char%&#39;</code></p></blockquote></li><li><strong>CONTACT</strong>: 拼接字符串<br><code>CONCAT(str1,str2,...)</code> 用于字符的拼接，若字符串为 NULL 则返回 NULL</li><li><strong>UPPER</strong>, <strong>LOWER</strong>: 大小写</li><li><strong>SUBSTR</strong>: 截取满足某 <strong>字符长度</strong> 的子串<ul><li><code>SELECT SUBSTR(&#39;abcde&#39;,2);</code> : [bcde]</li><li><code>SELECT SUBSTR(&#39;abcde&#39;,1,3);</code> : [abc]</li></ul></li><li><strong>INSTR</strong>: <code>INSTR(str,substr)</code> ，返回 substr 在 str 中第一次出现的索引，没有返回 0</li><li><strong>TRIM</strong>: <code>SELECT TRIM([remstr FROM] str)</code> 去掉首尾的 remstr，默认空格</li><li><strong>LPAD</strong>:<code>LPAD(str,n,c)</code> 左填充，用指定字符 c 填充 str 左侧至 n 长度</li><li><strong>RPAD</strong>:<code>RPAD(str,n,c)</code> 右填充，用指定字符 c 填充 str 左侧至 n 长度</li><li><p><strong>REPLACE</strong>: <code>REPLACE(str,a,b)</code> 用 a 替换 b</p><div class="note warning"><p>SQL 中索引从 1 开始</p></div></li></ul><h4><span id="912-数学函数">9.1.2 数学函数</span></h4><ul><li><strong>ROUND</strong>: 四舍五入</li><li><strong>CELL</strong>: 向上取整</li><li><strong>TRUNCATE</strong>: 截断</li><li><strong>MOD</strong>: 取余</li></ul><h4><span id="913-日期函数">9.1.3 日期函数</span></h4><ul><li><strong>NOW</strong>: 返回当前系统日期 + 时间，精确到秒</li><li><strong>CURDATE</strong>: 返回当前日期，不包含时间</li><li><strong>CURTIME</strong>: 返回当前时间，不包含日期</li><li><strong>YEAR(日期字段)</strong>: 返回字段的年</li><li><strong>MONTHNAME(日期字段)</strong>: 返回字段的月的英文</li><li><strong>STR_TO_DATE</strong>: <code>str_to_date(&#39;9-13-1999&#39;,&#39;%m-%d-%Y&#39;)</code> 字符转换成日期格式</li><li><strong>DATE_FORMAT</strong>: <code>DATE_FORMAT(&#39;2018/6/6&#39;,&#39;%Y年%m月%d日&#39;)</code> 日期转换成格式字符</li><li><p><strong>DATEDIFF</strong>: 两个日期的天数差值</p><div class="note info"><p><strong>格式解释</strong><br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-12-30-043741.png" width="80%" height="100%"></p></div></li></ul><h4><span id="914-其他函数">9.1.4 其他函数</span></h4><ul><li><strong>IFNULL</strong>:<br>判断字段表达式是否为 NULL，是的话返回 1，否则返回 0</li><li><strong>IFNULL</strong>:<br><code>IFNULL(check_expression, replacement_value)</code> 检查 <code>check_expression</code>是否为 NULL的表达式，如果不为 NULL 则保留，如果为 NULL 则返回 <code>replacement_value</code></li><li><strong>LENGTH</strong>: 字符长度</li></ul><h4><span id="915-流程控制函数">9.1.5 流程控制函数</span></h4><ul><li><strong>IF</strong>: <code>IF(exp1,exp2,exp3)</code> 若 exp1 为true，返回 exp2，否则返回 exp3</li><li><strong>CASE</strong>: 也是对某一列进行操作，有两种情况：<ul><li>类似于 switch （等值判断）：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE 要判断的字段或表达式</span><br><span class="line">WHEN  常量1 THEN 要显示的值 1 或者语句 1</span><br><span class="line">WHEN  常量2 THEN 要显示的值 2 或者语句 2</span><br><span class="line">...</span><br><span class="line">ELSE 要显示的值 n 或者语句 n （可以省略）</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li><li>类似于 if…else （区间判断）：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE </span><br><span class="line">WHEN  条件1 THEN 要显示的值 1 或者语句 1</span><br><span class="line">WHEN  条件2 THEN 要显示的值 2 或者语句 2</span><br><span class="line">...</span><br><span class="line">ELSE 要显示的值 n 或者语句 n（可以省略）</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3><span id="92-分组函数统计函数">9.2 分组函数（统计函数）</span></h3><div class="note info"><p>分组函数（为了分组查询使用），做统计使用，又称统计函数或聚合函数或组函数，一列作为输入，一个值作为输出</p></div><ul><li><strong>SUM</strong>：求和</li><li><strong>AVG</strong>：平均</li><li><strong>MIN</strong>：最小值</li><li><strong>MAX</strong>：最大值</li><li><p><strong>COUNT</strong>：计算非 NULL 值得个数，用的最多</p><div class="note warning no-icon"><ul><li>SUM、AVG 一般用于处理数值型</li><li>MAX、MIN、COUNT 可处理任何类型数据</li><li>以上函数全部忽略 NULL</li><li>和 DISTINCT 搭配，如 <code>SUM(DISTINCT salary)</code>：去重之后求和</li><li><code>SELECT COUNT(*) FROM employees;</code> 计算总行数（每一列不全为 NULL 的行数）</li><li><code>SELECT COUNT(1) FROM employees;</code> 计算总行数</li><li>和分组函数一同查询的字段要求是 group by 后的字段</li></ul></div></li></ul><h2><span id="参考资料">参考资料</span></h2><p><strong>[1]</strong> MySQL 基础+高级篇- 数据库 -sql -尚硅谷, 李玉婷, <em>bilibili.com</em>, 2017 [<a href="https://www.bilibili.com/video/av49181542" target="_blank" rel="noopener">视频链接</a>]</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“Get the dolphin up to speed”&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://yanghn.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="https://yanghn.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB 笔记</title>
    <link href="https://yanghn.com/posts/52233/"/>
    <id>https://yanghn.com/posts/52233/</id>
    <published>2019-04-07T14:37:00.000Z</published>
    <updated>2020-01-03T15:28:53.294Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="" alt="" style="width:85%"></p><a id="more"></a><div class="note warning"><ul><li>与其他编程语言不同，MATLAB 是从 1 开始索引的，通过括号进行索引: <code>A(1)</code></li><li>一般来说有个 <code>dim</code> 参数，类似于 numpy 中 <code>axis</code> 参数，<code>1</code> 表示计算每列，<code>2</code> 表示计算每行，如 <code>mean(A,1)</code>: 计算每一列的均值，返回一个行向量</li></ul></div><h2><span id="矩阵基本操作">矩阵基本操作</span></h2><ul><li><strong>将矩阵 A 列向量化</strong>：<code>A(:)</code></li><li><strong>将矩阵 A B 横着合并</strong>：<code>[A B]</code></li><li><strong>将矩阵 A B 竖着合并</strong>：<code>[A; B]</code></li><li><strong>所有列求和</strong>：<code>sum(A,2)</code></li></ul><h2><span id="画图操作">画图操作</span></h2><ul><li><strong>标记 x 轴</strong>：<code>xlabel(&#39;time&#39;)</code></li><li><strong>标记 y 轴</strong>：<code>ylabel(&#39;time&#39;)</code></li><li><strong>给 x 轴 y 轴修改坐标轴范围</strong>：<code>axis([0.5 1 -1 1])</code>（x 0.5 到 1，y -1 到 1）</li><li><strong>标记曲线</strong>：<code>legend(&#39;sin&#39;, &#39;cos&#39;)</code></li><li><strong>保存文件</strong>：<code>print -dpng &#39;myplot.png&#39;</code></li><li><strong>画多图在同一figure中</strong>：<code>subplot(1,2,1)</code>（生成 1*2 的布局，首先画第一张图）</li><li><strong>对矩阵画图观察矩阵分布大小</strong>：<code>imagesc(A)</code>（通常配合 colorbar colormap gray 生成带灰度 bar 的矩阵数值大小分布图）</li><li><strong>在当前画图状态下继续画图</strong>：<code>hold on</code></li><li><strong>在新的画图状态下画图</strong>：<code>hold off</code><br>##</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; style=&quot;width:85%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技能" scheme="https://yanghn.com/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MATLAB" scheme="https://yanghn.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>Python 进阶笔记</title>
    <link href="https://yanghn.com/posts/47671/"/>
    <id>https://yanghn.com/posts/47671/</id>
    <published>2019-03-21T06:14:53.000Z</published>
    <updated>2020-01-03T15:30:48.857Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“An interpreted, high-level, general-purpose programming language.”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-12-29-035716.jpg" alt="" style="width:85%"></p><a id="more"></a><h2><span id="函数的参数1">函数的参数<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></span></h2><div class="note warning"><h4><span id="结论">结论：</span></h4><p>Python 中一共有五种参数类型，分别是：位置参数（必选参数）、默认参数、可变参数、关键字参数和命名关键字参数，参数定义的顺序必须是：<strong>（位置参数）必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</strong></p></div><h3><span id="必选参数位置参数">必选参数（位置参数）</span></h3><p>指的是在给函数传参数时，按照顺序，依次传值。</p><h3><span id="默认参数">默认参数</span></h3><p>就是在写函数的时候直接给参数传默认的值，调用的时候，默认参数已经有值，就不用再传值了。默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><ol><li><strong>必选参数在前，默认参数在后</strong>，否则 Python 的解释器会报错，因为如果默认参数在前传递一个新的值，由于前面的默认参数有了默认值， Python 不知道到底是更新默认参数还是给必选参数。</li><li>当函数有多个参数时，把 <strong>变化大的参数放前面，变化小的参数放后面</strong>。变化小的参数就可以作为默认参数。</li><li><strong>默认参数必须指向不变对象！</strong> 因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</li></ol><h3><span id="可变参数">可变参数</span></h3><h2><span id="类与实例">类与实例</span></h2><ul><li><code>__str__</code>和<code>__repr__</code>方法： <code>__str__</code>方法 print 该对象时会被调用，是给用户看的，<code>__repr__</code>直接输入对象查看该对象属性，是给开发看的</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="noopener">廖雪峰的官方网站</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">python3-cookbook</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“An interpreted, high-level, general-purpose programming language.”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-12-29-035716.jpg&quot; alt=&quot;&quot; style=&quot;width:85%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技能" scheme="https://yanghn.com/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://yanghn.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>机器学习中的数学基础</title>
    <link href="https://yanghn.com/posts/33591/"/>
    <id>https://yanghn.com/posts/33591/</id>
    <published>2019-03-20T18:35:40.000Z</published>
    <updated>2020-01-08T15:01:04.492Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><div class="note primary"><h3><span id="文章目录">文章目录</span></h3><ul><li><a href="#1-线性代数与矩阵分析">1. 线性代数与矩阵分析</a><ul><li><a href="#11-可逆矩阵与奇异矩阵">1.1 可逆矩阵与奇异矩阵</a></li><li><a href="#12-二次型与半正定矩阵">1.2 二次型与半正定矩阵</a></li><li><a href="#13-特征值与特征向量">1.3 特征值与特征向量</a></li><li><a href="#14-矩阵微分">1.4 矩阵微分</a><ul><li><a href="#141-hessian-矩阵">1.4.1 Hessian 矩阵</a></li></ul></li></ul></li><li><a href="#2-数值计算与数学分析">2. 数值计算与数学分析</a><ul><li><a href="#21-全微分与梯度">2.1 全微分与梯度</a></li></ul></li><li><a href="#22-梯度下降算法">2.2 梯度下降算法</a><ul><li><a href="#221-批量梯度下降batch-gradient-descent">2.2.1 批量梯度下降(Batch Gradient Descent)</a></li><li><a href="#222-随机梯度下降stochastic-gradient-descent">2.2.2 随机梯度下降(Stochastic Gradient Descent)</a></li><li><a href="#223-小批量梯度下降mini-batch-gradient-descent">2.2.3 小批量梯度下降(Mini-Batch Gradient Descent)</a></li></ul></li><li><a href="#3-优化理论">3. 优化理论</a><ul><li><a href="#31-拉格朗日乘子法lagrange-multipliers与-kkt-条件">3.1 拉格朗日乘子法(Lagrange multipliers)与 KKT 条件</a><ul><li><a href="#311-等式约束">3.1.1 等式约束</a></li><li><a href="#312-不等式约束与-kkt-条件">3.1.2 不等式约束与 KKT 条件</a></li><li><a href="#313-拉格朗日对偶性lagrange-duality与-slater-条件6">3.1.3 拉格朗日对偶性(Lagrange Duality)与 Slater 条件[6]</a></li></ul></li></ul></li><li><a href="#参考资料">参考资料</a></li></ul></div><h2><span id="1-线性代数与矩阵分析">1. 线性代数与矩阵分析</span></h2><h3><span id="11-可逆矩阵与奇异矩阵">1.1 可逆矩阵与奇异矩阵</span></h3><blockquote><p><strong>逆矩阵</strong>（inverse matrix）: 给定一个 $n$ 阶方阵 $\mathbf {A}$，若存在一 $n$ 阶方阵 $\mathbf {B}$ ，使得 $\mathbf{AB}=\mathbf{BA}=\mathbf{I}_n$，则称 $\mathbf{A}$ 是可逆的，且 $\mathbf {B}$ 是 $\mathbf{A}$ 的逆矩阵，记作 $\mathbf {A} ^{-1}$。</p></blockquote><p>可逆矩阵叫做 <strong>非奇异矩阵（non-singular）</strong>，在数学中，“奇异”（singular）一词用来形容破坏了某种优良性质的数学对象。对于矩阵来说，“可逆”是一个好的性质，不可逆的矩阵就称为“奇异”矩阵，可以这样按两方面简单理解，我们知道，如果一个 $n$ 阶方阵的列向量线性无关，那么这个矩阵可逆。如果一个矩阵不可逆，说明列向量线性相关，即某个列向量可以被其余列向量线性表示，而线性表示可以理解为按列向量排列的线性空间中的点具有某种“共低维（小于 $n$ 维度）空间的性质”（一个 $2\times 2$ 的矩阵不可逆表示列向量共线，一个 $3\times 3$ 方阵不可逆表示列向量共面），这样对于一个 $n$ 维空间的向量来说其实是非常 <strong>“奇异”</strong> 的，所以， <strong>不可逆矩阵叫做一个奇异矩阵。</strong><br>我们也知道，若 $A$ 不可逆，则 $|A|=0$，材料中用“体积”方法直观的解释了行列式的几何意义：</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-21-032945.jpg" width="35%" height="50%"></p><p>上图中阴影部分的面积表示了一个二阶矩阵的一个行列式的值，若这个矩阵不可逆，两个向量线性相关，说明两个向量共线，这也说明阴影部分的面积为 $0$，故 <strong>不可逆矩阵的行列式为 $0$</strong>，而二维空间中两个向量共线是非常“奇异的”，所以 <strong>不可逆矩阵叫做一个奇异矩阵。</strong></p><h3><span id="12-二次型与半正定矩阵">1.2 二次型与半正定矩阵</span></h3><blockquote><p>对于一个方阵 $A \in \mathbb{R}^{n \times n}$ 和向量 $x \in \mathbb{R}^{n}$，标量 $x^{T} A x$ 叫做一个二次型</p></blockquote><p>按这种定义，则有：<br>$$x^{T} A x=\sum_{i=1}^{n} \sum_{j=1}^{n} A_{i j} x_{i} x_{j}$$<br>就相当于对矩阵 $A$ 所有元素都计算为二次项系数，由于对于只考虑 $i,j$ 位置的和，所以 $i,j$ 和 $j,i$ 的系数可以一分为二，故 $A$ 可以人为的构造成一个 <strong>对称矩阵</strong>，例如：</p><p>$$\begin{pmatrix}<br>x \\<br>y<br>\end{pmatrix}<br>\begin{pmatrix}<br>1 &amp; 2 \\<br>3 &amp; 4 \\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x &amp; y<br>\end{pmatrix} = x^2+5xy+4y^2 = \begin{pmatrix}<br>x \\<br>y \\<br>\end{pmatrix}<br>\begin{pmatrix}<br>1 &amp; 5/2 \\<br>5/2 &amp; 4 \\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x &amp; y<br>\end{pmatrix}<br>$$<br></p><div class="note warning no-icon"><ul><li>一个正定矩阵一定是一个可逆矩阵</li><li>对于矩阵$A \in \mathbb{R}^{m \times n}$，矩阵 $G=A^{T} A$ 叫做 <strong>Gram matrix</strong>，而对于一个列满秩（“竖长的矩阵”）矩阵 $A$，$x^{T} A^{T}A x$ 是一个半正定二次型，而当 $A x=0$ 时二次型等于零，由于 $A$ 列满秩，故二次型等于零 $x$ 无解，故 <strong>Gram matrix</strong> 是个正定矩阵，即是一个可逆矩阵。一般来说把 $A$ 看做训练集，训练集中样本数远大于特征数，所以 $A$ 一般是个列满秩矩阵.</li></ul></div><p></p><h3><span id="13-特征值与特征向量">1.3 特征值与特征向量</span></h3><blockquote><p>给定一个 $A \in \mathbb{R}^{n \times n}$，$$A x=\lambda x, \quad x \neq 0$$ 则称 $\lambda \in \mathbb{C}$ 为矩阵 $A$ 的特征值，$x \in \mathbb{C}^{n}$ 为对应特征值的特征向量.</p></blockquote><p>在技术上，我们一般是通过计算 $|(\lambda I-A)|=0$ 找到其特征值与特征向量，关于特征值与特征向量，有以下一些性质：<br></p><div class="note warning no-icon"><ul><li>矩阵的迹等于特征向量之和：$\operatorname{tr} A=\sum_{i=1}^{n} \lambda_{i}$</li><li>矩阵的行列式等于迹的乘积：$|A|=\prod_{i=1}^{n} \lambda_{i}$</li><li>对角矩阵 $D=\operatorname{diag}\left(d_{1}, \ldots d_{n}\right)$ 的特征值为 $d_{1}, \ldots d_{n}$.</li><li>对称矩阵的所有特征值都为实数，且其特征向量标准正交</li></ul></div><p></p><p>我们可以把所有的特征向量写在同一个矩阵 $X$ 中，可以写成：<br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-22-010134.jpg" width="60%" height="100%">可以得到：$$<br>A X=X \Lambda$$，若 $A$ 是对称矩阵，则 $U$ 是一个正交阵，$A=U \Lambda U^{T}$，可以得到：<br>$$ x^{T} A x=x^{T} U \Lambda U^{T} x=y^{T} \Lambda y=\sum_{i=1}^{n} \lambda_{i} y_{i}^{2}$$</p><p>而这一步就相当于二次型在配方，所以二次型的正定型取决于对称矩阵的特征值.</p><h3><span id="14-矩阵微分">1.4 矩阵微分</span></h3><blockquote><p>定义 $f : \mathbb{R}^{m \times n} \rightarrow \mathbb{R}$ 是一个矩阵到实数的一个映射，<br>$$\nabla_{A} f(A) \in \mathbb{R}^{m \times n}=\left[ \begin{array}{cccc}{\frac{\partial f(A)}{\partial A_{11}}} &amp; {\frac{\partial f(A)}{\partial A_{12}}} &amp; {\cdots} &amp; {\frac{\partial f(A)}{\partial A_{1}}} \\ {\frac{\partial f(A)}{\partial A_{21}}} &amp; {\frac{\partial f(A)}{\partial A_{22}}} &amp; {\cdots} &amp; {\frac{\partial f(A)}{\partial A_{2 n}}} \\ {\vdots} &amp; {\vdots} &amp; {\ddots} &amp; {\vdots} \\ {\frac{\partial f(A)}{\partial A_{m 1}}} &amp; {\frac{\partial f(A)}{\partial A_{m 2}}} &amp; {\cdots} &amp; {\frac{\partial f(A)}{\partial A_{m n}}}\end{array}\right]$$</p></blockquote><p>对于一个一个标量求梯度输出也是一个矩阵，其维数应该等于其输入的维数，所以到底谁是输入的矩阵是非常重要的，例如对于系数矩阵$A$ 和一个实向量变元$x$，对于 $\nabla f(A x)$ 可以认为输入的维数是和 $Ax$ 相同，所以输出的梯度不是一个与 $x$ 维度相等的向量，也可以认为输入的矩阵是 $x$，所以输出应该是一个矩阵，这两种方式理解都正确，类似于微积分中 $f(ax)$ 的 导数一样，要明确对谁求导数，可以这样规定：<br></p><div class="note danger no-icon"><ul><li>如果有下标，则对下标内的矩阵求梯度，即 $\nabla_{x} f(A x)$ 对 $x$ 求梯度，输出一个向量.</li><li>若没有下标，默认对括号内求梯度，即 $\nabla f(A x)$ 输出一个维度与 $Ax$ 相等的矩阵.</li></ul></div><p></p><h4><span id="141-hessian-矩阵">1.4.1 Hessian 矩阵</span></h4><p>与梯度类似，$$\nabla_{x}^{2} f(x) \in \mathbb{R}^{n \times n}=\left[ \begin{array}{cccc}{\frac{\partial^{2} f(x)}{\partial x_{1}^{2}}} &amp; {\frac{\partial^{2} f(x)}{\partial x_{1} \partial x_{2}}} &amp; {\cdots} &amp; {\frac{\partial^{2} f(x)}{\partial x_{1} \partial x_{n}}} \\ {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{1}}} &amp; {\frac{\partial^{2} f(x)}{\partial x_{2}^{2}}} &amp; {\cdots} &amp; {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{n}}} \\ {\vdots} &amp; {\vdots} &amp; {\ddots} &amp; {\vdots} \\ {\frac{\partial^{2} f(x)}{\partial x_{n} \partial x_{1}}} &amp; {\frac{\partial^{2} f(x)}{\partial x_{n} \partial x_{2}}} &amp; {\cdots} &amp; {\frac{\partial^{2} f(x)}{\partial x_{n}^{2}}}\end{array}\right]$$<br>这个矩阵是一个对称矩阵，不能看做梯度的梯度，因为梯度本身就是一个向量，向量没法求其梯度，几个有用的结论：<br></p><div class="note warning no-icon"><ul><li>$\nabla_{x} b^{T} x=b$</li><li>$\nabla_{x} x^{T} A x=2 A x$ 若 $A$ 是对称矩阵，特别地，$\nabla_{x} x^{T}x=2x$</li><li>$\nabla_{x} x^{T} A x=(A^{T}+A) x$ 若 $A$ 是非对称矩阵</li><li>$\nabla_{x}^{2} x^{T} A x=2 A$ 若 $A$ 是对称矩阵</li><li>$\nabla_{A}|A|=(\operatorname{adj}(A))^{T}=|A| A^{-T}$</li><li>$\nabla_{A} \log |A|=\frac{1}{|A|} \nabla_{A}|A|=A^{-1}$(用到了链式法则)</li><li>$\nabla_{A} \operatorname{tr} A B=B^{T}$</li><li>$\nabla_{A^{T}} f(A)=\left(\nabla_{A} f(A)\right)^{T}$</li><li>$\nabla_{A} \operatorname{tr} A B A^{T} C=C A B+C^{T} A B^{T}$</li></ul></div><p></p><h2><span id="2-数值计算与数学分析">2. 数值计算与数学分析</span></h2><h3><span id="21-全微分与梯度">2.1 全微分与梯度</span></h3><p>梯度(gradient)这个概念在整个机器学习和神经网络中占据重要地位，是非常重要的基础概念之一，本小节尽量利用通俗的语言去解释梯度这个概念，在理解梯度之前我们先回顾一下全微分</p><blockquote><p><strong>全微分</strong>，是多变数微积分的一个概念基本上就代表多元函数的微分，多变量函数在某点的全微分为一线性映射，通常可用矩阵或向量表示. 全微分可以看成是把单变数函数的微分推广到多变数函数上，其意义为多元函数变化量的线性逼近。例如，对于二元函数有：$$\boxed{<br>d z=f_{x} d x+f_{y} d y=\frac{\partial z}{\partial x} d x+\frac{\partial z}{\partial y} dy }$$</p></blockquote><p>初学者比较难理解这个公式怎么来的，此公式的主要思想是<strong>某点附近非常小的曲面用平面代替</strong>，如下图所示，红色平面为切平面，$A$ 点坐标为 $(x,y)$，$B$ 点坐标为 $(x+\Delta x,y+\Delta y)$，现在要比较这两点函数值 $f(x+\Delta x,y+\Delta y)-f(x,y)$ 的差值 $dz$</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-01-v2-e7ee6918c8da0d2664f92f1360273943_r%202.JPG" width="80%" height="100%"></p><p>显然路线应该是切平面的线段 $DF$，若我们考虑 $DF$ 在 $XOZ$ 与 $YOZ$ 平面的投影 $DE$ 和 $EF$，则我们可以通过计算路径 $D\rightarrow E\rightarrow F$ 来计算 $dz$，而 $\tan{\alpha},\tan{\beta}$ 正好刻画了两个方向的偏导数，所以有<br>$$dz = |EG|+|FH| = \frac{\partial f}{\partial x}\Delta x+\frac{\partial f}{\partial y}\Delta y$$<br>不难想象，如果拓展到更高维空间，也是这种积和的形式，这种形式恰好可以理解为<strong>向量内积</strong>，把 $J:=(\frac{\partial f}{\partial x},\frac{\partial f}{\partial y})$ 定义为<strong>梯度</strong>，站在曲面上的点为 $C$, 而他所能前进的方向($XOY$平面上)为 ($\Delta x,\Delta y)$，我们只考虑方向的话，不妨设为$(\cos{\gamma},\sin{\gamma})$，由柯西不等式，$C$点在做了此决策之后能最高能够上升的高度为<br>$$\frac{\partial f}{\partial x}\cos{\gamma}+\frac{\partial f}{\partial y}\sin{\gamma}\leq \sqrt{(\frac{\partial f}{\partial x})^2+(\frac{\partial f}{\partial y})^2}$$<br>当且仅当$(\Delta x,\Delta y)=J$ 时成立，也就是说，决策者 $C$ 沿着梯度的方向走，上升最快，梯度是函数值上升的最快的方向（在投影平面上）<br></p><div class="note warning no-icon"><ul><li>梯度的方向是函数值上升的最快的方向 (在自变量的平面内)</li><li>梯度的大小决定函数值上升的速率 ($dz$)</li></ul></div><p></p><p>其实这里还蕴藏着一个几何性质，我们知道利用平面去代替这个附近的曲面，妙就妙在这个平面用分量的偏微分就可以完全刻画了，实际上，平面很重要的一个性质就是法向量，而法向量其实也可以用这两个偏微分表示：<br>$$\boldsymbol{n} = (\frac{\partial f}{\partial x},\frac{\partial f}{\partial y},-1)$$<br>这就是 <strong>$z=f(x,y)$ 在点 $(x,y)$ 处的切平面法向量</strong>，证明也是简单的：在上图中我们把 $D,E,F$ 三点坐标表示出来，可以求得向量 $\vec{DE} = \Delta x(1,0,\frac{\partial f}{\partial x})$，$\vec{EF} = \Delta y(1,0,\frac{\partial f}{\partial y})$，则 $\boldsymbol{n}\bot\vec{EF}, \vec{DE}$. 而原曲面的方程为 $g(x,y,z)=f(x,y)-z=0$ 是 $g(x,y,z)$ 分别对 $x,y,z$ 求偏导之后的结果，是一个四维空间的梯度，我们将这个结论拓展到高维空间则有：<br></p><div class="note warning no-icon"><ul><li>曲面 $g(\boldsymbol{x})=0$ 上任意一点 $\boldsymbol{x}$，该点梯度 $\nabla g(\boldsymbol{x})$ 正交于该曲面 ($\boldsymbol{x}$ 为向量)</li></ul></div><br>关于曲面和函数这两个概念有点让人混淆，现在我们可以对梯度做一个总结：<p></p><div class="note success"><p><strong>设 $\boldsymbol{x}$ 是一个 $d$ 维向量，$f$ 是一个$\mathbb{R}^{d} \rightarrow \mathbb{R}$ 的映射，则有以下结论：</strong></p><ul><li>对于 $y=f(\boldsymbol{x})$ 来说是一个函数，几何上表示的是一个 $d+1$ 维度空间的曲面（流形）（例如 $z=f(x,y)=x+y$ 实际上是一个三维平面），对这个函数对每个分量求偏导数，得到一个 $d$ 维空间的向量 $\nabla f(\boldsymbol{x})$，向量的方向表示在 $d$ 维空间上看 $f$ 上升最快的方向，分量大小表示上升速率；</li><li>$f(\boldsymbol{x})=0$ 是一个 $d$ 维的曲面，是 $y=f(\boldsymbol{x})$ 这个 $d+1$ 维流形的等值面，梯度 $\nabla f(\boldsymbol{x})$ 是这个 $d$ 维曲面的法向量.</li></ul></div><h2><span id="22-梯度下降算法">2.2 梯度下降算法</span></h2><h3><span id="221-批量梯度下降batch-gradient-descent">2.2.1 批量梯度下降(Batch Gradient Descent)</span></h3><h3><span id="222-随机梯度下降stochastic-gradient-descent">2.2.2 随机梯度下降(Stochastic Gradient Descent)</span></h3><h3><span id="223-小批量梯度下降mini-batch-gradient-descent">2.2.3 小批量梯度下降(Mini-Batch Gradient Descent)</span></h3><h2><span id="3-优化理论">3. 优化理论</span></h2><h3><span id="31-拉格朗日乘子法lagrange-multipliers与-kkt-条件">3.1 拉格朗日乘子法(Lagrange multipliers)与 KKT 条件</span></h3><blockquote><p>拉格朗日乘子法是一种寻找多元函数在其变量受到一个或多个条件的约束时的极值的方法. 这种方法可以将一个有 $d$ 个变量与 $k$ 个约束条件的最优化问题转换为一个 $d+k$ 个变量的无约束优化问题求解.</p></blockquote><h4><span id="311-等式约束">3.1.1 等式约束</span></h4><p>我们先考虑如下只带一个约束条件的优化问题：<br>$$\begin{aligned}<br>&amp;\min_{\boldsymbol{x}}f(\boldsymbol{x})\\<br>&amp;\text{ s.t. }g(\boldsymbol{x})=0\end{aligned}\tag{3.1}$$<br>其中 $\boldsymbol{x}$ 为 $d$ 维向量，那么 $f(\boldsymbol{x})$ 为 $d+1$ 维空间的曲面，$g(\boldsymbol{x})=0$ 为 $d$ 维空间的曲面. 设 $\boldsymbol{x}^{*}$ 是 最优点（自由度其实是$d$），我们有以下结论：<br></p><div class="note warning no-icon"><ul><li>约束曲面 $g(\boldsymbol{x})=0$ 上任意一点 $\boldsymbol{x}$，该点梯度 $\nabla g(\boldsymbol{x})$ 正交于该约束曲面 <strong>(2.1 小节)</strong></li><li>在最优点 $x^{*}$ 处的目标函数 $f(\boldsymbol{x})$ 的梯度 $\nabla f(\boldsymbol{x}^{*})$正交于约束曲面</li></ul></div><p></p><p>如果我们吧 $g(\boldsymbol{x})=0$ 想象成三维空间的曲面的话不好理解，因为此时 $f(x)$ 就是四维流形了 (2.1 节)，假设 $g(\boldsymbol{x})=0$ 是一个二维曲线，如下图所示<br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-06-085421.png" width="60%" height="100%"></p><p>如果在最优点 $x^{*}$ 处的目标函数 $f(\boldsymbol{x})$ 的梯度 $\nabla f(\boldsymbol{x}^{*})$与约束曲面不正交，说明在 $\boldsymbol{x}^{*}$ 处约束曲面上还可以沿着某个分量的其他方向使得 $f(\boldsymbol{x})$ 达到更大（梯度是 $d$ 维空间的向量，$f(\boldsymbol{x})=0$ 只是 $d$ 维空间的一部分，梯度完全有可能不在 $g(\boldsymbol{x})=0$ 内），所以一定与约束平面正交，但与 $\nabla f(\boldsymbol{x})$ 方向不一定一致，所以存在常数 $\lambda$ ，$f(\boldsymbol{x})$ 在 $\boldsymbol{x}^{*}$ 取到极值时有：<br>$$\nabla f\left(\boldsymbol{x}^{*}\right)+\lambda \nabla g\left(\boldsymbol{x}^{*}\right)=0\tag{3.2}$$<br>我们发现一个 trick：<br>$$L(\boldsymbol{x}, \lambda)=f(\boldsymbol{x})+\lambda g(\boldsymbol{x})\tag{3.3}$$<br>上式称为<strong>拉格朗日函数</strong>，对 $\boldsymbol{x}$ 的偏导数就是 (3.2)，同时这个函数对 $\lambda$ 的偏导数正好就是约束条件，那么我们就可以把这个等式约束融合在目标函数里而变成无约束的优化问题.</p><h4><span id="312-不等式约束与-kkt-条件">3.1.2 不等式约束与 KKT 条件</span></h4><p>不等式约束稍微比等式约束稍微复杂一点，我们考虑两种情况：</p><ul><li>$f(\boldsymbol{x})$ 在边界上取到极值，此时对应等式约束的情况，即 $g(\boldsymbol{x}^{*})=0$</li><li>$f(\boldsymbol{x})$ 在内部取到极值，此时对应 $g(\boldsymbol{x}^{*})&lt;0$ 的情况</li></ul><p>对于情况一，我们回到了 (3.2) 式，但注意，此时的 $\lambda&gt;0$，这是因为： $\nabla g(\boldsymbol{x})$ 是 $y=g(\boldsymbol{x})$ 上升最快的方向，相对于此时 $\nabla g(\boldsymbol{x})=0$ 来说，肯定指向 $g(\boldsymbol{x})&gt;0$ 的方向，所以指向外部；而我们现在求的是 $f$ 的极小值，内部的点比外部要大，$\nabla g(\boldsymbol{x})$ 肯定指向内部，所以 $\lambda&gt;0$，这时候只需要<br>$$\begin{aligned}<br>&amp;\nabla f\left(\boldsymbol{x}^{*}\right)+\lambda \nabla g\left(\boldsymbol{x}^{*}\right)=0\\<br>&amp;g(\boldsymbol{x})=0\\<br>&amp;\lambda&gt;0\end{aligned}\tag{3.4}$$<br>对于情况二，解在内部约束条件就是无效的，因为在内部的解不管朝什么方向移动一小步都仍然满足约束条件，永远达不到边界，所以只需要 $\nabla f(\boldsymbol{x})=0$ 即可，这等价于(3.2)式 $\lambda=0$，将两种情况一合并在一起得到 $\lambda g(\boldsymbol{x})=0$</p><p>$$\left\lbrace\begin{array}{l}<br>{g(\boldsymbol{x}) \leqslant 0} \\<br>{\lambda \geqslant 0} \quad \quad \quad \quad \text{对偶可行性}\\<br>{\lambda g(\boldsymbol{x})=0} \quad \quad \text{互补松弛性}<br>\end{array}\right.\tag{3.5}$$</p><p>上式称为 KKT 条件(<a href="https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions#Regularity_conditions_(or_constraint_qualifications" target="_blank" rel="noopener">Karush–Kuhn–Tucker conditions</a>).</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-06-114728.jpg" width="50%" height="100%"></p><blockquote><p>上面两种情况可以用上面这张图片表示，图为函数的等值线与约束曲线 $g(\boldsymbol{x})$ 的关系，当 $\boldsymbol{x}^{*}$ 在内部时满足 $\nabla f(\boldsymbol{x})=0$，当 $\boldsymbol{x}^{*}$ 在外部时当且仅当边界与等值线相切的时候取到最大值，因为等高线始终与 $\nabla f(\boldsymbol{x})$ 正交.</p></blockquote><p>(3.5) 的结果可推广至多个约束等式与约束不等式的情况。考虑标准约束优化问题<br>$$\begin{array}{ll}<br>{\min} &amp; {f(\boldsymbol{x})} \\<br>{\text { s.t. }} &amp; {h_{i}(\boldsymbol{x})=0 \quad(i=1, \ldots, m)} \\<br>{} &amp; {g_{j}(\boldsymbol{x}) \leqslant 0 \quad(j=1, \ldots, p)}<br>\end{array}\tag{3.6}$$<br>引入拉格朗日乘子 $\boldsymbol{\lambda}$，$\boldsymbol{\mu}$<br>$$L(\boldsymbol{x}, \boldsymbol{\lambda}, \boldsymbol{\mu})=f(\boldsymbol{x})+\sum_{i=1}^{m} \lambda_{i} h_{i}(\boldsymbol{x})+\sum_{j=1}^{p} \mu_{j} g_{j}(\boldsymbol{x})\tag{3.7}$$<br>由不等式引入的 KKT 条件为：<br>$$\left\lbrace\begin{array}{l}<br>{g_{j}(\boldsymbol{x}) \leqslant 0} \\<br>{\mu_{j} \geqslant 0}\\<br>{\mu_{j} g_{j}(\boldsymbol{x})=0}<br>\end{array}\right.\tag{3.8}$$</p><h4><span id="313-拉格朗日对偶性lagrange-duality与-slater-条件6">3.1.3 拉格朗日对偶性(Lagrange Duality)与 Slater 条件[6]</span></h4><p>我们重新考虑 (3.6) 这个式子，任意一个带约束的优化都可以写成这样的形式（若求最大可以在目标函数前加负号转化为求最小）. 若 $h_1,h_2,\ldots,h_m$ 和 $f$ 都是<a href="http://en.wikipedia.org/wiki/Convex_function" target="_blank" rel="noopener">凸函数</a> ，并且 $g_1,g_2,\ldots,g_p$ 全都是仿射函数（就是形如 $Ax+b$ 的形式），那么这个问题就叫做<a href="https://en.wikipedia.org/wiki/Convex_optimization" target="_blank" rel="noopener">凸优化</a>(Convex optimization)问题. 凸优化问题有许多优良的性质，例如它的极值是唯一的。不过，这里我们并没有假定需要处理的优化问题是一个凸优化问题. 对于 (3.7) 我们假设<br>$$z(\boldsymbol{x})=\max_{\boldsymbol{\mu}\succeq 0, \boldsymbol{\lambda}}L(\boldsymbol{x}, \boldsymbol{\lambda}, \boldsymbol{\mu})\tag{3.9}$$这里 $\boldsymbol{\mu}\succeq 0$ 理解为向量 $\boldsymbol{\lambda}$ 的每一个元素都非负即可，上式是一个关于 $\boldsymbol{x}$ 的函数，我们有以下结论，当 $\boldsymbol{x}$ 满足(3.6)的约束时，则有<br>$$f(\boldsymbol{x})=z(\boldsymbol{x})\tag{3.10}$$ 这也是容易验证的，满足(3.6)的约束时，$h(\boldsymbol{x}_{i})=0$，注意到 $\mu_{j}g(\boldsymbol{x}_{j})$ 的非正性，最大化 $z(x)$ 时显然 $\mu_{i}g(\boldsymbol{x}_{j})=0$，所以就证明了上面的式子，这样一来，原始的带约束的优化问题(3.6)其实等价于如下的无约束优化问题：<br>$$\min_{\boldsymbol{x}}z(\boldsymbol{x})=\min_{\boldsymbol{x}}\max_{\boldsymbol{\mu}\succeq 0, \boldsymbol{\lambda}}L(\boldsymbol{x}, \boldsymbol{\lambda}, \boldsymbol{\mu})\tag{3.11}$$ 我们可以把 $\boldsymbol{x}$ 所在的整个空间分为两部分：一部分是满足约束条件 $P_1$，另一部分是不满足约束条件的 $P_2$：</p><ul><li>当 $\boldsymbol{x} \in P_1$ 时由 3.10 可知 $\min_{\boldsymbol{x}}f(\boldsymbol{x}) = \min_{\boldsymbol{x}}z(\boldsymbol{x})$</li><li>当 $\boldsymbol{x} \in P_2$ 时，$\max_{\boldsymbol{\mu}\succeq 0, \boldsymbol{\lambda}}L(\boldsymbol{x}, \boldsymbol{\lambda}, \boldsymbol{\mu})=\max_{\boldsymbol{\mu}\succeq 0, \boldsymbol{\lambda}}(f(\boldsymbol{x})+\infty)$，因为 $h$ 和 $g$ 在约束条件之外 $\lambda$ 和 $\mu$ 总能改变其值使得 $\sum_{i=1}^{m} \lambda_{i} h_{i}(\boldsymbol{x})+\sum_{j=1}^{p} \mu_{j} g_{j}(\boldsymbol{x})=+\infty$</li></ul><p>综合这两点，考虑$\boldsymbol{x}$ 的整个空间上要达到最小，$P_2$ 自动就被排除在外，所以最小化 $z(\boldsymbol{x})$ 就变成了目标函数为(3.11)的无约束规划（这里无约束是相对 $\boldsymbol{x}$ 来说，$\boldsymbol{\mu}$ 还是有约束）. 而这样写只是对原始式子做了一个变换，把约束条件融合在目标函数里，原问题没有发生本质变化，我们把 (3.11) 无约束目标规划成为原问题(primal problem)，是最小化 $\boldsymbol{x}$. 相对应的还有一个对偶问题(dual problem)，其形式非常类似，只是把 $\min$ 和 $\max$ 交换了一下：<br>$$\max_{\boldsymbol{\mu}\succeq 0, \boldsymbol{\lambda}}g(\boldsymbol{\mu},\boldsymbol{\lambda})=\max_{\boldsymbol{\mu}\succeq 0, \boldsymbol{\lambda}}\min_{\boldsymbol{x}}L(\boldsymbol{x}, \boldsymbol{\lambda}, \boldsymbol{\mu})\tag{3.12}$$ 交换之后的 dual problem 在最大化 $\boldsymbol{\mu},\boldsymbol{\lambda}$， 这和原来的 primal problem 并不相等，直观地，我们可以这样来理解：中国乒乓球国家队最差的选手比国外乒乓球最好的选手要强. 换句话说，如果 primal problem 的最小值记为 $p^{*}$，dual problem 的最大值记为 $d^{*}$，则有$$d^{*}\leqslant p^{*}\tag{3.13}$$这个性质叫做 weak duality ，对于所有的优化问题都成立。其中 $p^{*}−d^{*}$ 被称作 duality gap. 需要注意的是，无论 primal problem 是什么形式，dual problem 总是一个 <strong>convex optimization</strong> 的问题[7]：$$\begin{array}{ll}<br>{\max} &amp; g(\boldsymbol{\mu},\boldsymbol{\lambda}) \\<br>{\text { s.t. }} &amp; \boldsymbol{\mu}\succeq 0<br>\end{array}\tag{3.14}$$ 它的极值是唯一的（如果存在的话），并且有现成的软件包可以对凸优化问题进行求解（虽然求解 general 的 convex optimization 实际上是很慢并且只能求解规模较小的问题的）。这样一来，对于那些难以求解的 primal problem （比如，甚至可以是 NP 问题），我们可以通过找出它的 dual problem ，通过优化这个 dual problem 来得到原始问题的一个下界估计。或者说我们甚至都不用去优化这个 dual problem ，而是（通过某些方法，例如随机）选取一些 $\lambda\geqslant 0$ 和 $\mu$ ，带到 $g(\boldsymbol{\mu},\boldsymbol{\lambda})$ 中，这样也会得到一些下界（只不过不一定是最大的那个下界而已）。当然要选 $\boldsymbol{\mu}$ 和 $\boldsymbol{\lambda}$ 也并不是总是“随机选”那么容易，根据具体问题，有时候选出来的 $\boldsymbol{\lambda}$ 和 $\boldsymbol{\mu}$ 带入 $g$ 会得到 $−\infty$ ，这虽然是一个完全合法的下界，然而却并没有给我们带来任何有用的信息.<br>故事到这里还没有结束，既然有 weak duality ，显然就会有 strong duality. 所谓 strong duality ，就是$$d^{*}\leqslant p^{*}\tag{3.14}$$这是一个很好的性质，strong duality 成立的情况下，我们可以通过求解 dual problem 来优化 primal problem ，在 SVM 中我们就是这样做的。当然并不是所有的问题都能满足 strong duality ，在讲 SVM 的时候我们直接假定了 strong duality 的成立，这里我们就来提一下 strong duality 成立的条件。不过，这个问题是一个很复杂的问题，这里直接给出结论：<br></p><div class="note info no-icon"><p><strong>Slater 条件</strong><br>Slater 条件是指存在严格满足约束条件的点 $x$ ，这里的“严格”是指 $g_{i}(x)\leqslant 0$ 中的“小于或等于号”要严格取到“小于号”，亦即，存在 $x$ 满足:$$\begin{array}{ll}<br>{g_{i}(x)&lt;0} &amp; {i=1, \ldots, m} \\<br>{h_{i}(x)=0} &amp; {i=1, \ldots, p}<br>\end{array}\tag{3.15}$$如果原始问题是 Convex 的并且满足 Slater 条件的话，那么 strong duality 成立</p></div><br>需要注意的是，这里只是指出了 strong duality 成立的一种情况，而并不是唯一情况。例如，对于某些非 convex optimization 的问题，strong duality 也成立. 在 <a href="https://yanghn.com/posts/33807/#22-lagrange-duality">SVM 的 primal problem</a> 中是一个 QP（QP 是凸优化问题的一种特殊情况），而 Slater 条件实际上在这里就等价于是存在这样的一个超平面将数据分隔开来，亦即是“数据是可分的”. 所以在 Slater 条件成立的情况下用对偶问题可以求出极值点.<br>对偶问题和 KKT 条件还有一个定理，即若对偶问题和原问题有相同的解，则满足 KKT 条件（$f,g$ 为凸，$h$ 为仿射函数的情况下）. 我们结合 Slater 定理可以得到<br><div class="note success no-icon"><p>若 $f,g$ 为凸，$h$ 为仿射函数，$x$ 和 $\mu,\lambda$ 分别是原问题和对偶问题的解</p><ul><li>存在严格小于$\Longleftrightarrow$ $x$ 和 $\mu,\lambda$ 满足 KKT 条件(3.8)</li></ul></div><p></p><h2><span id="参考资料">参考资料</span></h2><p><strong>[1]</strong> Mathematics For Machine Learning, Marc Peter Deisenroth, A Aldo Faisal, and Cheng Soon Ong, <em>Cambridge University Press</em>, 2020 <a href="https://hnyang.oss-cn-shanghai.aliyuncs.com/mml-book_printed.pdf" target="_blank"><i></i><span>[PDF]</span></a><br><strong>[2]</strong> Linear Algebra Review and Reference, Zico Kolter, <em>CS224 material</em>, 2015 <a href="https://hnyang.oss-cn-shanghai.aliyuncs.com/Linear%20Algebra%20Review%20and%20Reference.pdf" target="_blank"><i></i><span>[PDF]</span></a><br><strong>[3]</strong> 矩阵分析与应用, 张贤达, <em>清华大学出版社</em>, 第二版, 2013 <a href="http://hnyang.oss-cn-shanghai.aliyuncs.com/%E3%80%8A%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%89%88%EF%BC%89%E5%BC%A0%E8%B4%A4%E8%BE%BE%E3%80%8BPDF.pdf" target="_blank"><i></i><span>[PDF]</span></a><br><strong>[4]</strong> Mathematics for Data Science, Ibrahim Sharaf ElDen, <em>towardsdatascience.com</em>, 2019 [<a href="https://towardsdatascience.com/mathematics-for-data-science-e53939ee8306" target="_blank" rel="noopener">Link</a>]<br><strong>[5]</strong> 机器学习 (附录), 周志华，<em>清华大学出版社</em>, 第一版, 2016 [<a href="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-05-%E5%91%A8%E5%BF%97%E5%8D%8E-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.pdf" target="_blank" rel="noopener">Link</a>]<br><strong>[6]</strong> 支持向量机：Duality, 张驰原, <em>pluskid.org</em>, 2010, [<a href="http://blog.pluskid.org/?p=702&amp;cpage=1#comment-7347" target="_blank" rel="noopener">Link</a>]<br><strong>[7]</strong> Stephen Boyd, et al. Convex Optimization, Cambridge university press, 2004. [<a href="https://web.stanford.edu/~boyd/cvxbook/bv_cvxbook.pdf" target="_blank" rel="noopener">Link</a>]</p>]]></content>
    
    <summary type="html">
    
      “工程能力决定下限，数学功底决定上限”
    
    </summary>
    
      <category term="机器学习" scheme="https://yanghn.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://yanghn.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数学" scheme="https://yanghn.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="cs229" scheme="https://yanghn.com/tags/cs229/"/>
    
  </entry>
  
  <entry>
    <title>线性模型</title>
    <link href="https://yanghn.com/posts/41333/"/>
    <id>https://yanghn.com/posts/41333/</id>
    <published>2019-03-18T06:06:46.000Z</published>
    <updated>2020-01-04T12:55:19.449Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A broad introduction to machine learning and statistical pattern recognition”</p><a id="more"></a><div class="note primary"><h3><span id="文章目录">文章目录</span></h3><ul><li><a href="#1-机器学习的定义">1. 机器学习的定义</a></li><li><a href="#2-训练样本与符号说明">2. 训练样本与符号说明</a></li><li><a href="#3-线性回归">3. 线性回归</a></li></ul></div><h2><span id="1-机器学习的定义">1. 机器学习的定义</span></h2><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-18-144704.jpg" width="40%" height="50%"><br>在学习的过程中，学习算法试图通过训练数据集中的样本产生一个可以预测 $y$ 的预测系统，这个过程就叫做机器学习。</p><h2><span id="2-训练样本与符号说明">2. 训练样本与符号说明</span></h2><p>规定 $X$ 表示训练集，$y$ 表示标签（一般大写字母表示矩阵，小写字母表示向量）<br></p><div class="note primary no-icon"><ul><li>$m$ = # training exmples.(训练样本个数，表的行数)</li><li>$n$ = # features.(特征个数，表的列数)</li><li>$(x,y)$ = “training example”</li><li>$(x^{(i)},y^{(i)})$ = 第 $i$ 个训练样本. (表的第 $i$ 行)</li></ul></div><p></p><p>线性模型试图通过特征的线性组合来进行预测，即</p><p>$$f(\boldsymbol{x})=w_0 + w_{1} x_{1}+w_{2} x_{2}+\ldots+w_{n} x_{n}$$<br>$w_0$ 叫做截距（intercept）如果不加上 $w_0$，当所有特征取 0 的时候训练集的标签一定为 0，这种假设显然是不合理的，为了统一写成样本的线性组合形式，我们人为地增加一维特征写成 $x_0=1$，所以上式写成：<br>$$f(\boldsymbol{x})=w_0x_0 + w_{1} x_{1}+w_{2} x_{2}+\ldots+w_{n} x_{n}\ \ \ (x_0=1)$$<br>写成矩阵形式为：<br>$$<br>X=\left[ \begin{array}{c}{1 \ —\left(x^{(1)}\right)^{T}}— \\ {1 \ —\left(x^{(2)}\right)^{T}—} \\ {\vdots} \\ {1 \ —\left(x^{(m)}\right)^{T}–}\end{array}\right]_{m\times (n+1)}<br>$$<br>一般 $X$ 是一个 $m\times (n+1)$ 的矩阵，$n+1$ 维的特征，$m$ 个训练样本，而我们样本所对应的标签 $y$ 为：<br>$$<br>y=\left[ \begin{array}{c}{y^{(1)}} \\ {y^{(2)}} \\ {\vdots} \\ {y^{(m)}}\end{array}\right]<br>$$<br>我们的目的就是找到一个参数向量 $\theta = \left[ \theta_0,\theta_1,\cdots\theta_n\right]^{T}$，使得我们估计值 $\boldsymbol{f}(X)$：<br>$$\boldsymbol{f}(X)=\left[ \begin{array}{c}{1 \ —\left(x^{(1)}\right)^{T}}— \\ {1 \ —\left(x^{(2)}\right)^{T}—} \\ {\vdots} \\ {1 \ —\left(x^{(m)}\right)^{T}–}\end{array}\right]\cdot\left[ \begin{array}{c}{\theta_0 \\ \theta_1 \\ {\vdots} \\ \theta_n}\end{array}\right]=X\theta$$<br>与我们样本中的 $y$ 最接近，s</p><h2><span id="3-线性回归">3. 线性回归</span></h2><p>对于线性回归，我们假设参数和输入的特征服从线性函数，也就是说<br>$$<br>h(x)=\sum_{i=0}^{n} \theta_{i} x_{i}=\theta^{T} x<br>$$<br>这里假定 $x_0=1$，定义其损失函数为偏离输出变量的平方和，也就是<br>$$<br>J(\theta)=\frac{1}{2} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A broad introduction to machine learning and statistical pattern recognition”&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://yanghn.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CS229" scheme="https://yanghn.com/tags/CS229/"/>
    
      <category term="机器学习" scheme="https://yanghn.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX 笔记</title>
    <link href="https://yanghn.com/posts/53355/"/>
    <id>https://yanghn.com/posts/53355/</id>
    <published>2019-03-11T00:26:40.000Z</published>
    <updated>2020-01-03T15:29:37.980Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A Python package for complex networks”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-12-29-035456.png" alt="" style="width:80%"></p><a id="more"></a><div class="note warning"><p>当前 Networkx 版本为 <code>0.24</code></p></div><h2><span id="一-网络的基本属性">一、网络的基本属性</span></h2><h3><span id="11-网络的类型">1.1 网络的类型</span></h3><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-10-17-152144.jpg" alt=""></p><h3><span id="12-连通性">1.2 连通性：</span></h3><ul><li>判断是否连通：<code>nx.is_connected(G)</code></li><li>取网络中最大连通子图：<code>Gc = G.subgraph(max(nx.connected_components(G), key=len)).copy()</code></li></ul><h3><span id="13-给网络-节点-连边增加属性">1.3 给网络、节点、连边增加属性</span></h3><p><strong><span class="label primary">给整个网络增加属性 ：</span></strong></p><ul><li>在网络生成时给网络增加属性：<code>G = nx.Graph(day=&quot;Friday&quot;)</code></li><li>在网络生成之后修改网络属性：<code>G.graph[&#39;day&#39;] = &quot;Monday&quot;</code></li><li>显示网络属性：<code>G.graph</code></li></ul><p><strong><span class="label primary">给点增加属性 ：</span></strong></p><ul><li>在网络生成时添加点属性：<code>G.add_node(1, time=&#39;5pm&#39;)</code>、<code>G.add_nodes_from([3], time=&#39;2pm&#39;)</code>(因为有一个关键字参数 <code>**attr</code>)</li><li>在网络生成之后修改点属性：<code>G.nodes[1][&#39;room&#39;] = 714</code></li><li>显示点属性：<code>G.nodes.data()</code></li><li>网络的度：<code>G.degree()</code>，如果无参数则返回所有节点的名称与其度值（<code>DegreeView</code>），若参数为一个节点名称，则返回改节点的度，若参数为节点序列，则返回节点名称与节点的度</li></ul><div class="note warning"><p><code>[d for n, d in G.degree()]</code>：返回所有节点的度值</p></div><h2><span id="二-二分图">二、二分图</span></h2><p>由于 NetworkX 没有一个自定义的二分图类型，所以所有的二分图都是 <code>Graph()</code> 或者 <code>DiGraph()</code> 类型，详细内容可参考 <a href="https://networkx.github.io/documentation/stable/reference/algorithms/bipartite.html" target="_blank" rel="noopener">Bipartite</a></p><ul><li><strong>检测图的二分性</strong>：<code>networkx.is_bipartite()</code></li><li><strong>分割二分图</strong>：<code>bottom_nodes, top_nodes = bipartite.sets(B)</code></li></ul><div class="note warning"><p>只有网络连通时分割结果才没有歧义，若网络不连通，则应该根据节点属性进行分割：<br><code>top_nodes = {n for n, d in B.nodes(data=True) if d[&#39;bipartite&#39;]==0}</code><br><code>bottom_nodes = set(B) - top_nodes</code></p></div><p><strong><span class="label primary">投影（projection） ：</span></strong></p><ul><li><strong>投影为 <code>Graph</code> 或 <code>MultiGraph</code></strong>：<code>projected_graph(B, nodes, multigraph=False)</code> 只考虑在 <code>nodes</code> 上构造的网络，若某两个点在 <code>B</code> 中有相同的邻居，则投影图中相邻，若有多个相邻的点，<code>multigraph</code> 参数决定了是否构造为 <code>MultiGraph</code>.（<code>B</code> 不需要要求为二分图，任意图都可以进行投影）</li><li></li></ul><h2><span id="子图">子图</span></h2><ul><li>按节点选取网络子图：<code>G.subgraph(nodes)</code></li><li>TODO:</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A Python package for complex networks”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-12-29-035456.png&quot; alt=&quot;&quot; style=&quot;width:80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技能" scheme="https://yanghn.com/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://yanghn.com/tags/Python/"/>
    
      <category term="NetworkX" scheme="https://yanghn.com/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 常用核心函数与方法</title>
    <link href="https://yanghn.com/posts/55796/"/>
    <id>https://yanghn.com/posts/55796/</id>
    <published>2019-02-20T10:53:43.000Z</published>
    <updated>2020-01-01T15:34:36.652Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A powerful Python data analysis toolkit”</p><a id="more"></a><div class="note warning"><p>当前 Pandas 版本为 <code>0.24.1</code></p></div><div class="note primary"><h3><span id="文章目录">文章目录</span></h3><ul><li><a href="#数据选取-索引-采集">数据选取、索引、采集</a></li><li><a href="#数据修改-删除-映射">数据修改、删除、映射</a></li><li><a href="#数据合并-连接-关系">数据合并、连接、关系</a><ul><li><a href="#concat-与-append-操作">Concat 与 Append 操作</a></li><li><a href="#merge-操作">Merge 操作</a></li></ul></li><li><a href="#group-by-技术">Group By 技术</a><ul><li><a href="#分割">分割</a></li></ul></li><li><a href="#应用">应用</a><ul><li><a href="#累计与求和">累计与求和</a></li><li><a href="#转换与应用">转换与应用</a></li></ul></li><li><a href="#拾遗">拾遗</a><ul><li><a href="#axis-取-0-还是-1">axis 取 0 还是 1？</a></li><li><a href="#正则表达式">正则表达式</a></li><li><a href="#字符串">字符串</a></li></ul></li><li><a href="#时间序列操作">时间序列操作</a></li><li><a href="#kaggle-数据竞赛常用命令">Kaggle 数据竞赛常用命令</a></li></ul></div><h2><span id="数据选取-索引-采集">数据选取、索引、采集</span></h2><ul><li><code>.loc</code>：利用索引定位，必须输入索引，输入索引不存在时会报错</li><li><code>.iloc</code>：i 表示 integer position，利用整数位置进行定位<div class="note primary"><p>若用 <code>df.loc</code>、 <code>df.iloc</code> 或者 <code>df[&#39;col&#39;]</code> 选取子集，是选取了原来 <code>dataframe</code> 的视图而不是副本，修改这个子集会修改原来的 <code>dataframe</code> ，所以要选取副本，再加上 <code>.copy()</code> 可创建副本，有时候 <code>Pandas</code> 会抛出 <code>SettingWithCopyWarning</code> 的警告，绝大部分是因为副本视图问题造成的。</p></div></li><li><strong>选取多行</strong>：<code>df.loc[[index_name1,index_name2]]</code></li><li><strong>选取多列</strong>：<code>df[[col_name1, col_name2]]</code></li><li><strong>正则表达式选取</strong>：<code>df[&#39;new_col&#39;] = df[&#39;col&#39;].str.extract(&#39;regex&#39;)</code> 按照 <code>regex</code> 正则表达式选取 <code>col</code> 列中每一元素，结果保存在 <code>new_col</code> ，查看更多请点击 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html" target="_blank" rel="noopener"><code>pandas.Series.str.extract</code></a></li><li><strong>正则表达式替换文本</strong>：<code>df[&#39;col&#39;].str.replace(&#39;text&#39;,&#39;&#39;)</code>（将 <code>text</code> 文本替换为空文本，即删除特定的字符），关于字符串操作，可以参考 <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p02_strings_and_text.html" target="_blank" rel="noopener">python3-cookbook</a></li><li><strong>查找缺失数据</strong>：<code>df.isnull()</code>：对整个 <code>df</code> 判断是否为空，返回一张大表，这张表每个元素为布尔值，<code>True</code> 则为空值.</li><li><p><strong>判断某一列（行）是否存在缺失值</strong>：<code>df.loc[&#39;index&#39;].isnull().any()</code>，存在则返回 <code>True</code>，不存在则返回 <code>False</code>.</p><div class="note primary"><p>对于数据很大的表，用 <code>df.isnull()</code> 不方便看到缺失值的具体位置，配合 <code>pandas.Series.any()</code> 函数可以确定某一行或者某一列出现缺失值，（<code>axis=0</code>: index,<code>axis=1</code>: columns），<code>any()</code> 方法表示判断给定的 Series 是否全部为 <code>False</code> ，若全为 <code>False</code> 则返回 <code>False</code>，如果有一个为 <code>True</code>，则返回 <code>True</code>，所以当返回 <code>True</code> 表示这一行或者这一列有缺失值</p></div></li><li><p><strong>判断某行（列）是否存在缺失数据</strong>：<code>df.loc[&#39;index&#39;].isnull().any()</code></p></li><li><strong>行循环</strong>：<code>for index, row in df.iterrows():</code></li></ul><h2><span id="数据修改-删除-映射">数据修改、删除、映射</span></h2><ul><li><strong>生成一个数据表</strong>：<code>df = pd.DataFrame(data={&#39;col1&#39;:[1,2,3],&#39;col2&#39;:[4,5,6]})</code></li><li><strong>增加一行</strong>：<code>df.loc[&#39;new_raw&#39;] = &#39;1&#39;</code></li><li><strong>增加一列</strong>：<code>df[&#39;new_colu&#39;]=&#39;1&#39;</code>.<div class="note danger no-icon"><p>按上面两种方式选取的子集为原来 <code>df</code> 的视图.</p></div></li><li><strong>删除一行</strong>：<code>df.drop(&#39;raw_name&#39;, axis=0, inplace=True)</code>，这里默认 <code>drop</code> 返回原 <code>df</code> 的视图，若设置 <code>inplace=True</code> 则修改 <code>df</code> 返回 <code>None</code>.</li><li><strong>删除一列</strong>：<code>df.drop(&#39;raw_name&#39;, axis=1, inplace=True)</code></li><li><strong>删除缺失数据</strong>：<code>df.dropna(axis=0, how=&#39;any&#39;, inplace=False, subset=[&#39;col&#39;])</code>. <code>axis=0</code> 表示检查这一行，按照 <code>how=&#39;any&#39;</code> (这一行只要出现了缺失，就删除)的方法删除这一行，<code>subset=[&#39;col&#39;]</code> 表示只检查 <code>col</code> 这一列是否有缺失值，<code>inplace=False</code> 表示删除后不替换原来的变量.</li></ul><ul><li><strong>修改列(行)名称</strong>：<code>df.rename(columns={&#39;old_col_name&#39;: &#39;new_col_name&#39;}, index={&#39;old_index_name&#39;: &#39;new_index_name&#39;},inplace=True)</code></li><li><strong>修改索引列名称</strong>：上面的方法无法改变索引列的名称，可以用 <code>df.index.name = &#39;new_name&#39;</code> 的方法.<div class="note warning"><p>凡是输入后返回一张表，说明原来带有 <code>inplace</code> 参数，如需替换则设置为 <code>True</code></p></div></li><li><strong>修改索引</strong>：<code>reset_index()</code> ，也可以将 MultiIndex 转换成普通的 Index.</li><li><strong>对索引排序</strong>：<code>df.sort_index()</code>，默认返回排序后的 <code>df</code>，可设置 <code>inplace</code> 参数.</li><li><strong>二级索引变成索引和列</strong>：<code>df.unstack()</code>，一般用在对两列的 <code>groupby</code>，之后转化为一级索引的 <code>DataFrame</code>，详情<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html" target="_blank" rel="noopener">点击</a><h2><span id="数据合并-连接-关系">数据合并、连接、关系</span></h2></li></ul><h3><span id="concat-与-append-操作">Concat 与 Append 操作</span></h3><h3><span id="merge-操作">Merge 操作</span></h3><h2><span id="group-by-技术">Group By 技术</span></h2><p>Pandas 提供了一个灵活高效的 groupby 功能，可以对某些标签或索引的局部进行累计分析，很多复杂的操作都可以化为 GroupBy 操作(不能保证是效率最高的).<br><a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html" target="_blank" rel="noopener">手册</a>上对于 GroupBy 主要可以分为以下三个步骤：<span class="label primary">分割-应用-组合</span><br></p><div class="note default no-icon"><ul><li>Splitting the data into groups based on some criteria.</li><li>Applying a function to each group independently.</li><li>Combining the results into a data structure.</li></ul></div><br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-11-144156.jpg" alt="" style="width:80%"><br>上图表现了这种过程，而中间的分割过程不需要显式地暴露出来，这一点十分重要。而且 GroupBy(经常)只需要一行代码， 就可以计算每组的和、均值、计数、最小值以及其他累计值。GroupBy 的用处就是将这些步骤进行抽象: 用户不需要知道在底层如何计算，只要把操作看成一个整体就够了.<p></p><h3><span id="分割">分割</span></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: df = pd.DataFrame(&#123;<span class="string">'X'</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>], <span class="string">'Y'</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: df</span><br><span class="line">Out[<span class="number">2</span>]:</span><br><span class="line">   X  Y</span><br><span class="line"><span class="number">0</span>  A  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  B  <span class="number">4</span></span><br><span class="line"><span class="number">2</span>  A  <span class="number">3</span></span><br><span class="line"><span class="number">3</span>  B  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: df.groupby([<span class="string">'X'</span>])</span><br><span class="line">Out[<span class="number">3</span>]: &lt;pandas.core.groupby.groupby.DataFrameGroupBy object at <span class="number">0x1144ea198</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到，这里的返回值不是一个 DataFrame 对象，而是一个 <code>DataFrameGroupBy</code> 对象。 这个对象的魔力在于，你可以将它看成是一种特殊形式的 DataFrame，里面隐藏着若干组 数据，但是在没有应用累计函数之前不会计算。GroupBy 对象是一种非常灵活的抽象类型。在大多数场景中，可以将它看成是 DataFrame 的集合.<br></p><div class="note primary"><ul><li>默认情况下，GroupBy 对象会对 group keys 进行排序，如果分的组过多，可以设置 <code>groupby([&#39;X&#39;], sort=False)</code> 提高运行速度.</li><li>默认情况下对多列进行 GroupBy 会产生 <a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical" target="_blank" rel="noopener">MultiIndex</a>，可以设置 <code>as_index=False</code> 取消生成 MultiIndex，也可以用 <code>.reset_index()</code> 来实现.</li></ul></div><p></p><p>利用 <code>get_group(&#39;group_name&#39;)</code> 方法获得某一分组的 <code>DataFrame</code>，还可以利用 <code>.groups</code> 属性获得包含所有分组的字典，字典的键为组名，例如：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df.groupby(<span class="string">'A'</span>).groups</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">&#123;<span class="string">'bar'</span>: Int64Index([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], dtype=<span class="string">'int64'</span>),</span><br><span class="line"> <span class="string">'foo'</span>: Int64Index([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>], dtype=<span class="string">'int64'</span>)&#125;</span><br></pre></td></tr></table></figure><br><span class="label info">这个属性可以用于组的循环：</span><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">57</span>]: grouped = df.groupby(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: <span class="keyword">for</span> name, group <span class="keyword">in</span> grouped:</span><br><span class="line">   ....:     print(name)</span><br><span class="line">   ....:     print(group)</span><br><span class="line">   ....: </span><br><span class="line">bar</span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">1</span>  bar    one  <span class="number">0.254161</span>  <span class="number">1.511763</span></span><br><span class="line"><span class="number">3</span>  bar  three  <span class="number">0.215897</span> <span class="number">-0.990582</span></span><br><span class="line"><span class="number">5</span>  bar    two <span class="number">-0.077118</span>  <span class="number">1.211526</span></span><br><span class="line">foo</span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">0</span>  foo    one <span class="number">-0.575247</span>  <span class="number">1.346061</span></span><br><span class="line"><span class="number">2</span>  foo    two <span class="number">-1.143704</span>  <span class="number">1.627081</span></span><br><span class="line"><span class="number">4</span>  foo    two  <span class="number">1.193555</span> <span class="number">-0.441652</span></span><br><span class="line"><span class="number">6</span>  foo    one <span class="number">-0.408530</span>  <span class="number">0.268520</span></span><br><span class="line"><span class="number">7</span>  foo  three <span class="number">-0.862495</span>  <span class="number">0.024580</span></span><br></pre></td></tr></table></figure><p></p><h2><span id="应用">应用</span></h2><h3><span id="累计与求和">累计与求和</span></h3><p>最常用的方法有 <code>.sum()</code> 和 <code>.size()</code>，<code>.sum()</code> 是对其余所有数值型的列全部求和，<code>.size()</code> 是只计算聚合的列的个数。<br>若对多列进行聚合，默认会把将要聚合的列当做一个 <a href="https://pandas.pydata.org/pandas-docs/version/0.22/advanced.html#advanced-hierarchical" target="_blank" rel="noopener">MultiIndex</a>，这是因为在 groupby 的时候包含一个默认属性 <code>as_index=True</code> 这样的好处有两点：</p><ol><li>加快运算速度</li><li>方便进一步的操作</li></ol><p>举例来说：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: df = pd.DataFrame(data = &#123;<span class="number">1</span>:[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>],<span class="number">2</span>:[<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'d'</span>,<span class="string">'c</span></span><br><span class="line"><span class="string">    ...: '</span>],<span class="number">3</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: df</span><br><span class="line">Out[<span class="number">14</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  a  b  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br><span class="line"><span class="number">4</span>  a  c  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>]).sum()</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">     <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">a b  <span class="number">2</span></span><br><span class="line">  c  <span class="number">1</span></span><br><span class="line">b a  <span class="number">1</span></span><br><span class="line">c d  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>],as_index=<span class="keyword">False</span>).sum()</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  a  c  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>而利用 <code>reset_index()</code> 可以达到同样的效果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>]).sum().reset_index()</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  a  c  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br></pre></td></tr></table></figure><div class="note danger"><p>但是对于 <code>.size()</code> 来说，设置 <code>reset_index()=False</code> 并没有效果，还是需要用 <code>reset_index()</code>，实际上，<code>DataFrameGroupBy</code> 对象 内置的<code>.size()</code> 方法返回的是一个 <code>Series</code> 对象而不是 <code>DataFrame</code></p></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>],as_index=<span class="keyword">False</span>).size() <span class="comment"># 依旧是 MultiIndex</span></span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br><span class="line">a  b    <span class="number">2</span></span><br><span class="line">   c    <span class="number">1</span></span><br><span class="line">b  a    <span class="number">1</span></span><br><span class="line">c  d    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>]).size().reset_index()</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  a  c  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br></pre></td></tr></table></figure><p>若要将统计的 size 成为新的一列，可以使用 <code>.to_frame</code> 方法生成新的一列： <code>df = df.groupby([&#39;A&#39;,&#39;B&#39;]).size().to_frame(&#39;size&#39;)</code></p><h3><span id="转换与应用">转换与应用</span></h3><p><code>apply()</code> 方法让你可以在每个组上应用任意方法。这个函数输入一个 <code>DataFrame</code>，返回一个 <code>Pandas</code> 对象（ <code>DataFrame</code> 或 <code>Series</code> ）或一个标量（ <code>scalar</code>，单个数值），新版的 <code>Pandas</code> 可以 放入 <code>apply</code> 的参数，例如：<code>df.apply(f,alpha=0.1)</code></p><p>-[]<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#transformation" target="_blank" rel="noopener">这里开始</a></p><h2><span id="拾遗">拾遗</span></h2><div class="note primary"><h3><span id="axis-取-0-还是-1">axis 取 0 还是 1？</span></h3><ul><li><code>axis=1</code> 表示按照行（index）的方向来，也就是说函数的输入为每一行，同理，<code>axis=0</code> 表示按照列（column）的方向来，也就是说函数的输入为每一列。</li><li><code>df.apply()</code> 输入 <code>0</code> 表示 apply 到每一列上去，输入 <code>1</code> 表示 apply 到每一行上去。</li><li><code>sum(axis=1)</code> 表示按行求和，<code>sum(axis=0)</code> 表示按列求和</li><li><code>drop(axis = 1)</code> 删除列</li></ul></div><div class="note primary"><h3><span id="正则表达式">正则表达式</span></h3><ul><li>从开头匹配：表达式最前面加上<code>^</code></li><li>匹配年份：<code>(?!0000)[0-9]{4}</code></li></ul></div><div class="note primary"><h3><span id="字符串">字符串</span></h3><ul><li><code>Series.str</code> 可以广播某一字符串方法，适用于整个列或者行，而避免用 <code>apply</code> 函数.</li><li>在某一列寻找包含某一字符串 <code>&#39;str&#39;</code> 的数据：<code>df[df[&#39;content&#39;].str.contains(&#39;str&#39;, na=False)]</code>，由于 <code>contains</code> 返回布尔型数据，前面要再加上一个 <code>df</code>, <code>na=False</code> 表示若遇到缺失数据返回 <code>False</code>.</li><li><code>strip()</code> 方法能用于删除开始或结尾的字符。 <code>lstrip()</code> 和 <code>rstrip()</code> 分别从左和从右执行删除操作。 默认情况下，这些方法会去除空白字符，但是你也可以指定其他字符.</li></ul></div><h2><span id="时间序列操作">时间序列操作</span></h2><ul><li><strong>生成固定日期的时间序列</strong>：<code>pd.date_range</code></li><li><strong>生成固定时间段的时间序列</strong>：<code>pd.date_range</code></li></ul><h2><span id="kaggle-数据竞赛常用命令">Kaggle 数据竞赛常用命令</span></h2><ul><li><code>pandas.Series.factorize()</code>：返回一个 tuple，对于数据的某一列为种类属性，将里面的类别映射成数字:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">0</span>]: labels, uniques = pd.factorize([<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: labels</span><br><span class="line">Out[<span class="number">1</span>]: array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: uniques</span><br><span class="line">Out[<span class="number">2</span>]: array([<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>], dtype=object)</span><br></pre></td></tr></table></figure>这个命令一般用于数据探索阶段，例如当给定的数据不知道是否为 categorical 类型的数据时，可以先进行一个映射：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Label encoder</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> train.columns[train.dtypes == <span class="string">'object'</span>]:</span><br><span class="line">    X[c] = X[c].factorize()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li>将训练集中的特征进行区分：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat_cols = list(train.select_dtypes(include=[<span class="string">'object'</span>]).columns)</span><br><span class="line">num_cols = list(train.select_dtypes(exclude=[<span class="string">'object'</span>]).columns)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A powerful Python data analysis toolkit”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 使用方法记录</title>
    <link href="https://yanghn.com/posts/54421/"/>
    <id>https://yanghn.com/posts/54421/</id>
    <published>2019-02-20T09:42:42.000Z</published>
    <updated>2019-04-10T06:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A web-based application suitable for capturing the whole computation process.”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-20-090019.jpg" alt="" style="width:80%"></p><a id="more"></a><h2><span id="jupyter-notebook-简介">Jupyter Notebook 简介</span></h2><p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，而 Jupyter这个名字是它要服务的三种语言的缩写：Julia，Python 和 R，这个名字与 “木星（Jupiter）” 谐音。而 Jupyter Notebook 最早是为了支持 Python 设计的，目前为止支持运行 40 多种编程语言。</p><p>其本质是一个 Web 应用程序，便于创建和共享程序文档，支持实时代码的运行。而且非常适合用来做流式的数据分析和尝试性的程序编写。而在普通的 Python shell 或者在 IDE（集成开发环境）如 Pycharm 中写代码会显得更加繁琐。</p><p>作为一个 Web 应用程序，还可以实现远程服务器访问，也就是说可以配置jupyter 服务器来实现远程浏览器登录，还可以支持多人团队的 Jupyter Hub 实现服务器资源分配，关于 jupyter 远程登录可以参考<a href="https://www.e-learn.cn/content/qita/1390519" target="_blank" rel="noopener">这篇</a>文章，前提是服务器必须有公网 IP，若没有，可以参考各种内网穿透的方法。</p><div class="note primary"><p>作为 Web 服务器，若 8888 端口没有占用，Jupyter Notebook 会默认将 8888 设定为通信端口，若占用，则会将端口号 +1，有的时候在 shell 内无法停止端口占用，可以手动停止端口占用以免浪费端口。<br>这里以 Windows 为例：例如要停止 8889 端口，则可以在 cmd 下输入 <code>netstat -aon|findstr &quot;8889&quot;</code> 找到对应的 PID，然后在任务管理器下结束对应 PID 的进程，即可完成端口释放。</p></div><p>另外，Jupyter Notebook 非常适合作为教学工具，因为 markdown 的支持极大地丰富了文字表现力，现在 也有人将技术教学视频“翻译”成可执行的 <code>.ipynb</code> 文档，在类 IDE 环境中边看视频边实操运行代码。如 <a href="http://momodel.cn" target="_blank" rel="noopener">Mo 平台</a></p><h2><span id="笔记本扩展功能">笔记本扩展功能</span></h2><div class="note primary"><p>笔记本扩展（nbextensions）是一种 JavaScript模块，可以加载到笔记本前端页面上，可以大大提升效率。</p></div><p>安装时需要用到conda：<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge jupyter_nbextensions_configurator</span><br></pre></td></tr></table></figure><p></p><p>总之，安装合适的扩展功能可以极大地方便代码书写。</p><h2><span id="jupyter-notebook-的快捷键">Jupyter NoteBook 的快捷键</span></h2><p>Jupyter在顶部的菜单里保留了许多快捷键：<code>Help &gt; keyboard Shortcuts</code>. 每次更新Jupyter时，都值得再次进行查看，因为新的快捷键总是不断被添加进来。</p><p>查看快捷键的方式是使用命令面板：<code>Cmd</code> + <code>Shift</code> + <code>P</code> （或者 Linux 和Windows上 <code>Ctrl</code>+ <code>Shift</code> + <code>P</code>）</p><p>Jupyter Notebook 有两种键盘输入模式。即命令模式和编辑模式，这与 <a href="http://www.vim.org/" target="_blank" rel="noopener">Vim</a> 有些类似。在编辑模式下，可以往单元中键入代码或文本，此时单元格被绿色的框线包围，且命令模式下的快捷键不生效。在命令模式下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，此时的单元格被灰色的框线包围，且编辑模式下的快捷键不生效。</p><div class="note primary"><p>从命令模式进入编辑模式需按 <code>Enter</code> 键，从编辑模式切换到命令模式需按 <code>Esc</code> 键。</p></div><span class="label success">命令模式快捷键（按 `Esc` 键开启）:</span><ul><li>在当前 cell 下方创建新的 cell：<code>A</code></li><li>在当前 cell 上方创建新的 cell：<code>B</code></li><li>删除选中的单元：连续按两个 <code>D</code></li><li>进入 Markdown 状态：<code>M</code></li><li>恢复最后一个被删除的 cell：<code>Z</code></li></ul><span class="label success">编辑模式快捷键（ 按 Enter 键启动）:</span><ul><li>给出当前函数提示：<code>Shift</code> + <code>Tab</code></li><li>注释（反注释）当前的代码行：<code>Ctrl</code> + <code>/</code></li><li>删除当前光标的全部文字：<code>Command</code> + <code>Delete</code></li></ul><h2><span id="常用的-jupyter-magic">常用的 Jupyter Magic</span></h2><p>常用的 Jupyter Magic 魔法方法总结</p><ul><li><code>%load test.py</code>：将当前路径下 <code>test.py</code> 载入到 jupyter 的当前 cell 中</li><li><code>%reset -f</code>：清除所有已经定义过的变量</li><li><code>%%writefile filename.py</code>：写在 cell 的开头，运行时保存为 <code>filename.py</code> 文件，路径默认为当前工作路径</li><li>cell 内画图：<code>%matplotlib inline</code></li><li>使得 cell 内输出图形为矢量图：<code>%config InlineBackend.figure_format = &#39;svg&#39;</code></li><li><code>%store data</code>: 保存 <code>data</code> 变量到磁盘，可以用在不同的 NoteBook 之间传递变量，适合短期保存（可 pickle 化的）数据</li><li><code>%store</code>: 查看已保存的变量</li><li><code>%store -r</code>: 从磁盘里已保存好的文件更新现在所有的变量，会覆盖当前同名的变量</li><li><code>%store -r data</code>: 更新覆盖某一个变量</li><li><code>%store -d data</code>: 移除已保存的 <code>data</code></li><li><code>%store -z</code>: 移除全部保存的的变量</li></ul><div class="note warning"><p>变量保存在 <code>~/.ipython/profile_default/db/autorestore/&lt;variable_name&gt;</code> ，<code>~</code> 指 home 文件夹，并不适合用于资料的长期保存，可能会受到版本迭代的影响.</p></div><h3><span id="利用魔法命令进行-python-代码分析">利用魔法命令进行 Python 代码分析</span></h3><ul><li><code>%timeit</code>: 对某一行语句多次重复计算代码运算时间，多于较慢的命令会自动调整重复次数，<a href="http://docs.python.org/library/timeit.html#timeit.Timer.timeit" target="_blank" rel="noopener">其中在底层做了一些聪明的事情来阻止系统的垃圾回收</a>，所以 <code>%timeit</code> 通常比 <code>%time</code> 得到更短的时间</li><li><code>%time</code>: 对某一行语句多次重复计算代码运算时间，主要关心 <code>Wall time</code></li><li><code>%%timeit</code>、<code>%%time</code>: 对整个代码块计时</li><li><code>%prun</code>: 对每行单独计算时间分析，返回时间统计表</li><li><code>%who_ls</code>: 查看当前命名空间内的全部变量</li><li><code>%reset_selective -f regex</code>: 清除变量名称符合正则表达式的变量，<code>-f</code> 表示不询问强制执行.</li><li><code>%reset -f</code> : <code>清除所有变量</code></li></ul><h2><span id="升级到-jupyter-lab">升级到 Jupyter Lab！</span></h2><p><a href="https://jupyterlab.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">JupyterLab</a> 是 Jupyter Notebook 的下一代产品，集成了更多功能。越来越像一个 类似于 MATLAB 的 IDE，目前开发到 0.35 版本，已经可以使用而且非常强大，据官网说法，当 1.0.0 版本出来之时，就会取代 jupyter notebook.</p><p>将服务器升级为 Jupyter Lab 非常简单，只需要在服务器上安装好后在shell 内输入 <code>jupyter lab</code>, 原来 Notebook 的设置完全不改变，远程输入服务器地址即可访问 Jupyter Lab.</p><p>JupyterLab 最大的好处就在于，<span class="label info">对于多个 Notebook 可以使用同一个 Kernel</span> ，也就是说，数据科学家需要一边尝试一边写核心代码，这样可以分开为两个 Notebook 而不显得凌乱.</p><div class="note warning"><p>Jupyter Lab 无法兼容原来 NoteBook 的插件，需要额外安装 Jupyter Lab 插件，更多插件请参考 <a href="https://github.com/jupyterlab/jupyter-renderers" target="_blank" rel="noopener">Jupyter Renderers</a></p><p>Notes:</p><ul><li>查看所安装的插件可以运行 <code>jupyter labextension list</code></li><li>卸载某插件可以用 <code>jupyter labextension uninstall</code>，例如：<br><code>jupyter labextension uninstall @jupyterlab/plotly-extension</code></li></ul></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="http://liuchengxu.org/pelican-blog/category/general.html" target="_blank" rel="noopener">[译] 27 个 Jupyter Notebook的小提示与技巧 | Focus on ML &amp; DM</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://www.zybuluo.com/hanxiaoyang/note/534296" target="_blank" rel="noopener">Jupyter Notebook的27个秘诀，技巧和快捷键 | 作业部落 Cmd Markdown 编辑阅读器</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top"><a href="http://blog.rexking6.top/2018/12/20/JupyterLab%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">JupyterLab插件 | RexKing6’s Note</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A web-based application suitable for capturing the whole computation process.”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-20-090019.jpg&quot; alt=&quot;&quot; style=&quot;width:80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jupyter" scheme="https://yanghn.com/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 文字排版全纪录</title>
    <link href="https://yanghn.com/posts/40915/"/>
    <id>https://yanghn.com/posts/40915/</id>
    <published>2019-01-17T03:12:24.000Z</published>
    <updated>2020-01-04T15:11:12.196Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“再好的表达能力也需要精致的排版技巧”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-02-21-134236.jpg" alt="" style="width:80%"></p><a id="more"></a><h2><span id="1-为什么使用-hexo-排版">1. 为什么使用 Hexo 排版</span></h2><p>hexo 是使用 Markdown 语言作为主要书写语言，其目的是通过简单、易读易写的文本格式生成结构化的 HTML 文档，<span class="label warning">所以 Markdown 是兼容 HTML 的</span>。</p><p>虽然一些基本的语法在各种 Markdown 书写软件是支持的，但是不同的软件支持的广度又不一样，例如 Github Flavored Markdown (GFM) 语法不支持 Markdown 注脚，这会造成易用性的困难，Hexo 可以很好地解决这个排版问题，例如可以通过安装相应的插件实现。</p><p>利用 <code>hexo server</code> 进入<a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">调试模式</a>，右边网页实时渲染 <code>control+R</code> 刷新，左边书写 Markdown <code>control+S</code> 保存，必要时可以利用移动设备局域网下访问站点或利用 Chrome 调试成移动端观察渲染效果。</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2020-01-03-155553.png" alt=""></p><p>也有人将这种写作方式制作成一个后端管理工具，例如 <a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">hexo admin</a>，不过相比直接网页渲染，所支持的渲染效果并不好.</p><div class="note info"><p>利用 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a> 可以使用 Snippets 方便输入以下快捷命令<br><span class="label info">TODO</span></p></div><h2><span id="2-hexo-文章模板文件">2. Hexo 文章模板文件</span></h2><p>如果你是在站点文件夹根目录用 <code>hexo new post &lt;title&gt;</code> 新建的文章，那么其实它就是将文章的模版文件 <code>post.md</code>「复制」了一份到 <code>~/blog/source/_posts/</code> 下，所以这也意味着：</p><ol><li>你可以通过命令行的方式创建模板样式的 <code>.md</code> 文件。</li><li>你可以直接通过在 <code>~/blog/source/_posts/</code> 下新建 <code>.md</code> 结尾的文件来写新的文章。</li></ol><div class="note primary"><p>为了美观起见，英文和中文之间必须添加空格</p></div>首先这里附上我的模板文件<figure class="highlight md"><figcaption><span>文件位置：~/hexo/blog/scaffolds/post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">permalink:</span><br><span class="line">categories:</span><br><span class="line">tags: []</span><br><span class="line">description:</span><br><span class="line">mathjax: </span><br><span class="line">---</span><br><span class="line">&lt;p class="description"&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src="" alt="" style="width:85%" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">&#123;% note success no-icon %&#125; &lt;center&gt;本文更新于  &lt;/center&gt;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger"><p>Tips: 这个地方写作时若直接插入上面 Markdown 代码，<code>{{ title }}</code>、<code>{{ date }}</code> 的部分会被转义，所以应该在代码中间插入 <code>{% raw %}{% endraw %}</code> 防止被转义。</p></div><p>下面逐一解释上述模板文件</p><ul><li>以 <code>---</code>分隔的区域，叫做 <a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-matter</a> ，是用于指定此文件所包含的变量，具体变量实现可以百度搜索了解</li><li>Hexo 会自动识别 <code>&lt;!-- more --&gt;</code> 部分为摘要，也就是表现在首页部分，一般来说，为了美观起见，<span class="label warning">首页都是一句话加上一张图片</span>排版，这句话写在 <code>&lt;p&gt;&lt;/p&gt;</code> 标签内，<code>src</code> 插入图片的 url 链接。</li><li><span class="label warning">正文中所有的标题都是从二级标题开始</span>。</li><li>最后插入 <code>&lt;hr /&gt;</code> 横线表示文章结束，从后面可以插入参考文献。</li><li>最后插入本文的修改时间，技术总是会随着时间更新，提示读者本文的最后修改时间。</li></ul><p>当然，文章摘要还需要在 <code>_custom.styl</code> 下插入一些自定义 CSS 样式，代码如下：</p><figure class="highlight diff"><figcaption><span>文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 文章的描述description</span></span><br><span class="line"><span class="addition">+ .posts-expand .post-meta .post-description &#123;</span></span><br><span class="line"><span class="addition">+     font-style: italic;</span></span><br><span class="line"><span class="addition">+     font-size: 14px;</span></span><br><span class="line"><span class="addition">+     margin-top: 30px;</span></span><br><span class="line"><span class="addition">+     margin-bottom: 0px;</span></span><br><span class="line"><span class="addition">+     color: #666;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ // 自定义替代description的样式</span></span><br><span class="line"><span class="addition">+ p.description&#123;</span></span><br><span class="line"><span class="addition">+     text-align: center;</span></span><br><span class="line"><span class="addition">+     font-size: 14px;</span></span><br><span class="line"><span class="addition">+     font-style: italic;</span></span><br><span class="line"><span class="addition">+     color: #666;</span></span><br><span class="line"><span class="addition">+     margin-top: 30px;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><div class="note info"><p>红色 <code>-</code> 和绿色 <code>+</code> 的样式哪来的？哈哈哈，原来这也是一种语言，叫 <code>diff</code>，所以你只需在 <code>[language]</code> 这写 <code>diff</code>，然后在相应代码前面加上 <code>-</code> 和 <code>+</code> 就行了。不过默认的 <code>-</code> 是绿色，<code>+</code> 是红色，与 GitHub 上相反，别扭就自己改成 GitHub 的，在 <code>custom.styl</code> 加入以下代码</p></div><figure class="highlight diff"><figcaption><span>文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 文章```代码块diff样式</span></span><br><span class="line"><span class="addition">+ pre .addition &#123;</span></span><br><span class="line"><span class="addition">+     background: #e6ffed;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ pre .deletion &#123;</span></span><br><span class="line"><span class="addition">+     background: #ffeef0;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><h2><span id="3-段内文字格式">3. 段内文字格式</span></h2><p>Hexo 中基本的 Markdown 语法手册可以参考这篇博文 <a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">Hexo Markdown 简明语法手册 | Mobilicorpus</a>，如果有些用 Markdwon 的语法却达不到预期效果（甚至产生奇怪的 bugs），或者用 Markdwon 的语法无法实现，这时就可以考虑用 HTML 和 CSS。</p><p>下面是比较常见的，难以用 Markdwon 的语法实现的 HTML 语言：</p><table><thead><tr><th style="text-align:center">样式</th><th style="text-align:center">代码</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">分隔线</td><td style="text-align:center"><code>&lt;hr /&gt;</code></td><td style="text-align:center"><hr></td></tr><tr><td style="text-align:center">引用</td><td style="text-align:center"><code>&lt;blockquote&gt;引用内容&lt;/blockquote&gt;</code></td><td style="text-align:center"><blockquote>引用内容</blockquote></td></tr><tr><td style="text-align:center">更宽的引用</td><td style="text-align:center"><code>&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt;</code></td><td style="text-align:center"><p></p><blockquote>引用内容</blockquote><p></p></td></tr><tr><td style="text-align:center">居中</td><td style="text-align:center"><code>&lt;center&gt;内容&lt;/center&gt;</code></td><td style="text-align:center"><center>内容</center></td></tr><tr><td style="text-align:center">右对齐</td><td style="text-align:center"><code>&lt;p style=&quot;text-align:right&quot;&gt;内容&lt;/p&gt;</code></td><td style="text-align:center"><p style="text-align:right">内容</p></td></tr><tr><td style="text-align:center">左对齐</td><td style="text-align:center"><code>&lt;p style=&quot;text-align:left&quot;&gt;内容&lt;/p&gt;</code></td><td style="text-align:center"><p style="text-align:left">内容</p></td></tr><tr><td style="text-align:center">字体大小和颜色<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td><td style="text-align:center"><code>&lt;font color=&quot;red&quot; size=&quot;1&quot;&gt;内容&lt;/font&gt;</code></td><td style="text-align:center"><font color="red" size="2">内容</font></td></tr><tr><td style="text-align:center">黄色荧光笔</td><td style="text-align:center"><code>&lt;mark&gt;内容&lt;/mark&gt;</code></td><td style="text-align:center"><mark>内容</mark></td></tr></tbody></table><h3><span id="31-bootstrap-callout2">3.1 Bootstrap Callout<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></span></h3><p>本站用的是 Next 主题，其配备了一些自带的主题样式，需要在<span class="label warning">主题配置文件</span> 中开启：</p><figure class="highlight yml"><figcaption><span>文件位置：~/hexo/blog/themes/next/config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以获得类似 beamer 中的 block 样式：<br></p><div class="note danger"><h4><span id="this-is-a-note">This is a note</span></h4><p>note text<br>note text</p></div><p></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### This is a note</span><br><span class="line">note text</span><br><span class="line">note text</span><br><span class="line">&#123;% endnote %&#125; </span><br></pre></td></tr></table></figure><p></p><div class="note primary"><p><strong>注意：</strong><br>可以在 <code>danger</code> 后面加上 <code>no-icon</code> 实现去掉旁边的 icon，这个地方我用了四级标题 <code>####</code>，避免歧义，左侧导航栏没有显示，在主题配置文件 <code>toc</code> 选项可以修改，同样，在附上这段代码时,同样加上 <code>{% raw %}{% endraw %}</code>，防止被转义。</p></div><p>还有一种 label 样式，所谓的 label 从效果上看神似荧光笔，例如：</p><ol><li>这是<span class="label default">default</span></li><li>这是<span class="label primary">primary</span></li><li>这是<span class="label success">success</span></li><li>这是<span class="label info">info</span></li><li>这是<span class="label warning">warning</span></li><li>这是<span class="label danger">danger</span></li><li>这是有删除线的<del><span class="label danger">danger</span></del></li></ol><p>相应的代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default@default%&#125;</span><br><span class="line">&#123;% label primary@primary%&#125;</span><br><span class="line">&#123;% label success@success%&#125;</span><br><span class="line">&#123;% label info@info%&#125;</span><br><span class="line">&#123;% label warning@warning%&#125;</span><br><span class="line">&#123;% label danger@danger%&#125;</span><br><span class="line">~~&#123;% label danger@danger%&#125;~~ </span><br></pre></td></tr></table></figure><p></p><h3><span id="32-代码格式">3.2 代码格式</span></h3><p>在主题配置文件可以开启代码自动高亮功能，代码按照以下格式给出<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [line_number:(true|false)] [highlight:(true|false)] [first_line:number] [mark:#,#-#] %&#125;</span><br><span class="line">YOUR CODE HERE</span><br><span class="line">&#123;% endcodeblock %&#125; </span><br></pre></td></tr></table></figure><p></p><ul><li><code>title</code> 是代码名称，一般为此段代码所在的文件路径；</li><li><code>language</code> 是代码语言的名称，用来设置代码块颜色高亮，纯文本用 <code>plain</code>；</li><li><code>url</code> 是文件所在的超链接地址；</li><li><code>link text</code> 如它的字面意思，超链接的名称；</li></ul><div class="note warning no-icon"><p>注意：这四个参数都不是必须的，若不指定代码语言开启自动高亮后则会自动为代码高亮</p></div><p><mark>更多内置标签插件样式参考 <a href="https://hexo.io/zh-cn/docs/tag-plugins#" target="_blank" rel="noopener">标签插件</a></mark></p><h2><span id="4-段间排版">4. 段间排版</span></h2><p>对于中文排版，常用的排版方式分为两种，一种是首段空两格，段间距等于行间距，这种方式叫做段首缩排（下图左一）。还有一种是段首不进行缩进，段间距大于行间距，叫做段间距式（下图左二）。</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-02-21-134236.jpg" alt="文字的排版方式"></p><p>书籍印刷的表现要求是专注文字内容，因此阅读体验应当置于美观之上。由于段间距比段首缩排的分离程度更大，一字连一字阅读时易产生隔阂感、停顿感，故段首缩排与之相比更为优雅，有着更好的阅读体验。</p><p>对于网页，与纸质书的翻页不同，它是竖直方向的连续滚动。当网页快速滚动时，就使段落上下相连的段首缩排显得繁密易懵，而段落上下间隔的段间距则显得结构简明。段首缩排在快速滚动的互联网时代显得混乱与不整齐，段间距也就比段首缩排更适合于网页，因为它更利于快速传达信息。</p><div class="note danger"><p>不要同时用段首缩排和段间距！(上图右一)，技术类文章用段间距排版（左二），文学类的文章用段首缩排（左一）！</p></div><h2><span id="5-mathjax">5. Mathjax</span></h2><ul><li><code>\|</code> 变为 <code>\\|</code></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="http://www.w3school.com.cn/tags/tag_font.asp" target="_blank" rel="noopener">HTML <font>标签 | w3school</font></a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://theme-next.org/docs/tag-plugins/note/" target="_blank" rel="noopener">Note (Bootstrap Callout) | NexT</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top"><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 | reuixiy</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“再好的表达能力也需要精致的排版技巧”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-02-21-134236.jpg&quot; alt=&quot;&quot; style=&quot;width:80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://yanghn.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://yanghn.com/tags/hexo/"/>
    
  </entry>
  
</feed>
