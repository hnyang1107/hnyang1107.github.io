<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HN YANG</title>
  
  <subtitle>「求知若饥，虚心若愚」</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hnyang.me/"/>
  <updated>2019-01-18T08:16:03.547Z</updated>
  <id>https://hnyang.me/</id>
  
  <author>
    <name>HNYANG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 文字排版全纪录</title>
    <link href="https://hnyang.me/2019/01/17/Hexo%20%E6%8E%92%E7%89%88%E5%85%A8%E7%BA%AA%E5%BD%95/"/>
    <id>https://hnyang.me/2019/01/17/Hexo 排版全纪录/</id>
    <published>2019-01-17T03:12:24.000Z</published>
    <updated>2019-01-18T08:16:03.547Z</updated>
    
    <content type="html"><![CDATA[<p class="description">再好的表达能力也需要精致的排版技巧</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-01-18-025957.jpg" alt="" style="width:100%"></p><a id="more"></a><h2 id="为什么使用-Hexo-排版"><a href="#为什么使用-Hexo-排版" class="headerlink" title="为什么使用 Hexo 排版"></a>为什么使用 Hexo 排版</h2><p>hexo 是使用 Markdown 语言作为主要书写语言，其目的是通过简单、易读易写的文本格式生成结构化的 HTML 文档，<span class="label warning">所以 Markdown 是兼容 HTML 的</span>。</p><p>虽然一些基本的语法在各种 Markdown 书写软件是支持的，但是不同的软件支持的广度又不一样，例如 Github Flavored Markdown (GFM) 语法不支持 Markdown 注脚，这会造成易用性的困难，Hexo 可以很好地解决这个排版问题，例如可以通过安装相应的插件实现。</p><p>这里推荐 Markdown 软件 <a href="https://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a>，可以很好的支持静态博客的生成，还可以将笔记发布到印象笔记，可以说非常方便。</p><p>利用 <code>hexo server</code> 进入<a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">调试模式</a>，左边网页实时渲染 <code>control+R</code> 刷新，右边 书写 Markdown <code>control+S</code> 保存，必要时可以利用移动设备局域网下访问站点或利用 Chrome 调试成移动端观察渲染效果。</p><p><img src="http://hnyang.oss-cn-shanghai.aliyuncs.com/2019-01-17-Hexo%20%E6%8E%92%E7%89%88%E5%85%A8%E7%BA%AA%E5%BD%95-1.png" alt=""></p><h2 id="Hexo-文章模板文件"><a href="#Hexo-文章模板文件" class="headerlink" title="Hexo 文章模板文件"></a>Hexo 文章模板文件</h2><p>如果你是在站点文件夹根目录用 <code>hexo new post &lt;title&gt;</code> 新建的文章，那么其实它就是将文章的模版文件 <code>post.md</code>「复制」了一份到 <code>~/blog/source/_posts/</code> 下，所以这也意味着：</p><ol><li>你可以通过命令行的方式创建模板样式的 <code>.md</code> 文件。</li><li>你可以直接通过在 <code>~/blog/source/_posts/</code> 下新建 <code>.md</code> 结尾的文件来写新的文章。</li></ol><div class="note primary"><p>为了美观起见，英文和中文之间必须添加空格</p></div>首先这里附上我的模板文件<figure class="highlight md"><figcaption><span>文件位置：~/hexo/blog/scaffolds/post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">permalink:</span><br><span class="line">categories:</span><br><span class="line">tags: []</span><br><span class="line">description:</span><br><span class="line">mathjax: </span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width:85%"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">&#123;% note success no-icon %&#125; <span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>本文更新于  <span class="xml"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span>&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger"><p>Tips: 这个地方写作时若直接插入上面 Markdown 代码，<code>{{ title }}</code>、<code>{{ date }}</code> 的部分会被转义，所以应该在代码中间插入 <code>{% raw %}{% endraw %}</code> 防止被转义。</p></div><p>下面逐一解释上述模板文件</p><ul><li>以 <code>---</code>分隔的区域，叫做 <a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-matter</a> ，是用于指定此文件所包含的变量，具体变量实现可以百度搜索了解</li><li>Hexo 会自动识别 <code>&lt;!-- more --&gt;</code> 部分为摘要，也就是表现在首页部分，一般来说，为了美观起见，<span class="label warning">首页都是一句话加上一张图片</span>排版，这句话写在 <code>&lt;p&gt;&lt;/p&gt;</code> 标签内，<code>src</code> 插入图片的 url 链接。</li><li><span class="label warning">正文中所有的标题都是从二级标题开始</span>。</li><li>最后插入 <code>&lt;hr /&gt;</code> 横线表示文章结束，从后面可以插入参考文献。</li><li>最后插入本文的修改时间，技术总是会随着时间更新，提示读者本文的最后修改时间。</li></ul><p>当然，文章摘要还需要在 <code>_custom.styl</code> 下插入一些自定义 CSS 样式，代码如下：</p><figure class="highlight diff"><figcaption><span>文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 文章的描述description</span></span><br><span class="line"><span class="addition">+ .posts-expand .post-meta .post-description &#123;</span></span><br><span class="line"><span class="addition">+     font-style: italic;</span></span><br><span class="line"><span class="addition">+     font-size: 14px;</span></span><br><span class="line"><span class="addition">+     margin-top: 30px;</span></span><br><span class="line"><span class="addition">+     margin-bottom: 0px;</span></span><br><span class="line"><span class="addition">+     color: #666;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ // 自定义替代description的样式</span></span><br><span class="line"><span class="addition">+ p.description&#123;</span></span><br><span class="line"><span class="addition">+     text-align: center;</span></span><br><span class="line"><span class="addition">+     font-size: 14px;</span></span><br><span class="line"><span class="addition">+     font-style: italic;</span></span><br><span class="line"><span class="addition">+     color: #666;</span></span><br><span class="line"><span class="addition">+     margin-top: 30px;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><div class="note info"><p>红色 <code>-</code> 和绿色 <code>+</code> 的样式哪来的？哈哈哈，原来这也是一种语言，叫 <code>diff</code>，所以你只需在 <code>[language]</code> 这写 <code>diff</code>，然后在相应代码前面加上 <code>-</code> 和 <code>+</code> 就行了。不过默认的 <code>-</code> 是绿色，<code>+</code> 是红色，与 GitHub 上相反，别扭就自己改成 GitHub 的，在 <code>custom.styl</code> 加入以下代码</p></div><figure class="highlight diff"><figcaption><span>文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 文章```代码块diff样式</span></span><br><span class="line"><span class="addition">+ pre .addition &#123;</span></span><br><span class="line"><span class="addition">+     background: #e6ffed;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ pre .deletion &#123;</span></span><br><span class="line"><span class="addition">+     background: #ffeef0;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><h2 id="段内文字格式"><a href="#段内文字格式" class="headerlink" title="段内文字格式"></a>段内文字格式</h2><p>Hexo 中基本的 Markdown 语法手册可以参考这篇博文 <a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">Hexo Markdown 简明语法手册 | Mobilicorpus</a>，如果有些用 Markdwon 的语法却达不到预期效果（甚至产生奇怪的 bugs），或者用 Markdwon 的语法无法实现，这时就可以考虑用 HTML 和 CSS。</p><p>下面是比较常见的，难以用 Markdwon 的语法实现的 HTML 语言：</p><table><thead><tr><th style="text-align:center">样式</th><th style="text-align:center">代码</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">分隔线</td><td style="text-align:center"><code>&lt;hr /&gt;</code></td><td style="text-align:center"><hr></td></tr><tr><td style="text-align:center">引用</td><td style="text-align:center"><code>&lt;blockquote&gt;引用内容&lt;/blockquote&gt;</code></td><td style="text-align:center"><blockquote>引用内容</blockquote></td></tr><tr><td style="text-align:center">更宽的引用</td><td style="text-align:center"><code>&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt;</code></td><td style="text-align:center"><p></p><blockquote>引用内容</blockquote><p></p></td></tr><tr><td style="text-align:center">居中</td><td style="text-align:center"><code>&lt;center&gt;内容&lt;/center&gt;</code></td><td style="text-align:center"><center>内容</center></td></tr><tr><td style="text-align:center">右对齐</td><td style="text-align:center"><code>&lt;p style=&quot;text-align:right&quot;&gt;内容&lt;/p&gt;</code></td><td style="text-align:center"><p style="text-align:right">内容</p></td></tr><tr><td style="text-align:center">左对齐</td><td style="text-align:center"><code>&lt;p style=&quot;text-align:left&quot;&gt;内容&lt;/p&gt;</code></td><td style="text-align:center"><p style="text-align:left">内容</p></td></tr><tr><td style="text-align:center">字体大小和颜色<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td><td style="text-align:center"><code>&lt;font color=&quot;red&quot; size=&quot;1&quot;&gt;内容&lt;/font&gt;</code></td><td style="text-align:center"><font color="red" size="2">内容</font></td></tr><tr><td style="text-align:center">黄色荧光笔</td><td style="text-align:center"><code>&lt;mark&gt;内容&lt;/mark&gt;</code></td><td style="text-align:center"><mark>内容</mark></td></tr></tbody></table><h3 id="Bootstrap-Callout2"><a href="#Bootstrap-Callout2" class="headerlink" title="Bootstrap Callout2"></a>Bootstrap Callout<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3><p>本站用的是 Next 主题，其配备了一些自带的主题样式，需要在<span class="label warning">主题配置文件</span> 中开启：</p><figure class="highlight yml"><figcaption><span>文件位置：~/hexo/blog/themes/next/config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以获得类似 beamer 中的 block 样式：<br></p><div class="note danger"><h4 id="This-is-a-note"><a href="#This-is-a-note" class="headerlink" title="This is a note"></a>This is a note</h4><p>note text<br>note text</p></div><p></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### This is a note</span><br><span class="line">note text</span><br><span class="line">note text</span><br><span class="line">&#123;% endnote %&#125; </span><br></pre></td></tr></table></figure><p></p><div class="note primary"><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>可以在 <code>danger</code> 后面加上 <code>no-icon</code> 实现去掉旁边的 icon，这个地方我用了四级标题 <code>####</code>，避免歧义，左侧导航栏没有显示，在主题配置文件 <code>toc</code> 选项可以修改，同样，在附上这段代码时,同样加上 <code>{% raw %}{% endraw %}</code>，防止被转义。</p></div><p>还有一种 label 样式，所谓的 label 从效果上看神似荧光笔，例如：</p><ol><li>这是<span class="label default">default</span></li><li>这是<span class="label primary">primary</span></li><li>这是<span class="label success">success</span></li><li>这是<span class="label info">info</span></li><li>这是<span class="label warning">warning</span></li><li>这是<span class="label danger">danger</span></li><li>这是有删除线的<del><span class="label danger">danger</span></del></li></ol><p>相应的代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default@default%&#125;</span><br><span class="line">&#123;% label primary@primary%&#125;</span><br><span class="line">&#123;% label success@success%&#125;</span><br><span class="line">&#123;% label info@info%&#125;</span><br><span class="line">&#123;% label warning@warning%&#125;</span><br><span class="line">&#123;% label danger@danger%&#125;</span><br><span class="line">~~&#123;% label danger@danger%&#125;~~ </span><br></pre></td></tr></table></figure><p></p><h3 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h3><p>在主题配置文件可以开启代码自动高亮功能，代码按照以下格式给出<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [line_number:(true|false)] [highlight:(true|false)] [first_line:number] [mark:#,#-#] %&#125;</span><br><span class="line">YOUR CODE HERE</span><br><span class="line">&#123;% endcodeblock %&#125; </span><br></pre></td></tr></table></figure><p></p><ul><li><code>title</code> 是代码名称，一般为此段代码所在的文件路径；</li><li><code>language</code> 是代码语言的名称，用来设置代码块颜色高亮，纯文本用 <code>plain</code>；</li><li><code>url</code> 是文件所在的超链接地址；</li><li><code>link text</code> 如它的字面意思，超链接的名称；</li></ul><div class="note warning no-icon"><p>注意：这四个参数都不是必须的，若不指定代码语言开启自动高亮后则会自动为代码高亮</p></div><p><mark>更多内置标签插件样式参考 <a href="https://hexo.io/zh-cn/docs/tag-plugins#" target="_blank" rel="noopener">标签插件</a></mark></p><h2 id="段间排版"><a href="#段间排版" class="headerlink" title="段间排版"></a>段间排版</h2><p>对于中文排版，常用的排版方式分为两种，一种是首段空两格，段间距等于行间距，这种方式叫做段首缩排（下图左一）。还有一种是段首不进行缩进，段间距大于行间距，叫做段间距式（下图左二）。</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-01-18-025957.jpg" alt="文字的排版方式"></p><p>书籍印刷的表现要求是专注文字内容，因此阅读体验应当置于美观之上。由于段间距比段首缩排的分离程度更大，一字连一字阅读时易产生隔阂感、停顿感，故段首缩排与之相比更为优雅，有着更好的阅读体验。</p><p>对于网页，与纸质书的翻页不同，它是竖直方向的连续滚动。当网页快速滚动时，就使段落上下相连的段首缩排显得繁密易懵，而段落上下间隔的段间距则显得结构简明。段首缩排在快速滚动的互联网时代显得混乱与不整齐，段间距也就比段首缩排更适合于网页，因为它更利于快速传达信息。</p><div class="note danger"><p>千万不要同时用段首缩排和段间距！(上图右一)，技术类文章用段间距排版（左二），文学类的文章用段首缩排（左一）！</p></div><div class="note success no-icon"><center>本文更新于</center></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="http://www.w3school.com.cn/tags/tag_font.asp" target="_blank" rel="noopener">HTML <font>标签 | w3school</font></a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://theme-next.org/docs/tag-plugins/note/" target="_blank" rel="noopener">Note (Bootstrap Callout) | NexT</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top"><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 | reuixiy</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;再好的表达能力也需要精致的排版技巧&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-01-18-025957.jpg&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://hnyang.me/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://hnyang.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>New</title>
    <link href="https://hnyang.me/2019/01/15/New/"/>
    <id>https://hnyang.me/2019/01/15/New/</id>
    <published>2019-01-15T08:12:51.000Z</published>
    <updated>2019-01-18T02:59:11.292Z</updated>
    
    <content type="html"><![CDATA[<p></p><p class="description">这是基本的介绍</p><br><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fz7fye4p97j31700sgqfu.jpg" alt="" style="width:85%"><p></p><a id="more"></a><h2 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h2><ul><br><li><i class="fa fa-check-square"></i> 已完成</li><br><li><i class="fa fa-square"></i> 未完成</li><br></ul><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><blockquote class="blockquote-center"><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p></blockquote><h2 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h2><hr><div class="note success no-icon"><center>本文更新于 2019-01-15</center></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p class=&quot;description&quot;&gt;这是基本的介绍&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fz7fye4p97j31700sgqfu.jpg&quot; alt=&quot;&quot; style=&quot;width:85%&quot;&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://hnyang.me/tags/Linux/"/>
    
      <category term="机器学习" scheme="https://hnyang.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 数据清洗</title>
    <link href="https://hnyang.me/2019/01/09/Hello-World-0/"/>
    <id>https://hnyang.me/2019/01/09/Hello-World-0/</id>
    <published>2019-01-09T11:42:36.000Z</published>
    <updated>2019-01-18T06:48:51.266Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pandas-数据清洗"><a href="#Pandas-数据清洗" class="headerlink" title="Pandas 数据清洗"></a>Pandas 数据清洗</h3><p>本文主要介绍如何查找缺失数据<br><a id="more"></a></p><p>用 <code>isnull</code> 检查某一列是否为缺失数据<br>例如：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.post_id[df.post_id.isnull()]</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fyhtphwtwsj308x06tmx1.jpg" alt=""></p><ul><li>若指定若在整个表中出现缺失，则删除这一行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna()</span><br></pre></td></tr></table></figure><p><em>若不赋值，则不改变原来的<code>df</code></em></p><ul><li>若只考虑<code>post_id</code>这一列上，只要出现缺失数据则删除改行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.dropna(subset=[<span class="string">'post_id'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>danger %&#125;</span><br><span class="line"><span class="comment">#### This is a note</span></span><br><span class="line">note text</span><br><span class="line">note text</span><br><span class="line">&#123;% endnote %&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Pandas-数据清洗&quot;&gt;&lt;a href=&quot;#Pandas-数据清洗&quot; class=&quot;headerlink&quot; title=&quot;Pandas 数据清洗&quot;&gt;&lt;/a&gt;Pandas 数据清洗&lt;/h3&gt;&lt;p&gt;本文主要介绍如何查找缺失数据&lt;br&gt;
    
    </summary>
    
    
      <category term="Pandas" scheme="https://hnyang.me/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hnyang.me/2019/01/09/hello-world/"/>
    <id>https://hnyang.me/2019/01/09/hello-world/</id>
    <published>2019-01-09T11:20:50.132Z</published>
    <updated>2019-01-15T01:42:16.468Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>$$\int^{1}_{-1}\lim\frac{x_i+y_i}{x+y}+\sin^{2}{x}=1$$</p><div class="note info"><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>Content (md partial supported)<br>$$\int^{1}_{-1}\lim\frac{x_i+y_i}{x+y}+\sin^{2}{x}=1$$</p></div><div class="note warning"><p>Content (md partial supported)</p></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Linux Biolinum'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_Rah.eot"</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_Rah.eot"</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_Rah.woff2"</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_Rah.woff"</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_Rah.ttf"</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Linux Biolinum'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RBah.eot"</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RBah.eot"</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RBah.woff2"</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RBah.woff"</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RBah.ttf"</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Linux Biolinum'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RIah.eot"</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RIah.eot"</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RIah.woff2"</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RIah.woff"</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="built_in">url</span>(<span class="string">"/fonts/LinBiolinum_RIah.ttf"</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五月天自1999年7月7日正式出道，现已发行了9张录音室专辑、4张精选辑（其中2张分别为在中国大陆与日本出道发行）和数张演唱会专辑，销售数量颇佳，在各地举办无数巡回演唱会，屡屡创下地方演唱会纪录与商机。出道成名后，四次夺下金曲奖“最佳乐团奖”（截至2017年6月）。[4]。</p><p>1995年－97年：So Band<br>五月天的前身“So Band”乐团，由当时就读师大附中的吉他手怪兽（温尚翊）、主唱阿信（陈信宏），以及第一任的鼓手钱佑达在1995年组成 [5]。</p><p>之后贝斯手玛莎（蔡昇晏）加入。四人自高中毕业后，分别进入不同的大学就读，但乐团并未停止活动，持续在许多酒吧、餐厅驻唱表演。</p><p>之后在1997年的野台开唱活动前，加入了吉他手石头（石锦航）。为了报名参加野台开唱，于是他们使用玛莎在网络BBS的代号“MAYDAY”作为团名，并在1997年3月29日台北市大安森林公园野台开唱当天正式改名为“五月天”，并定该日为乐团的成军纪念日 [4]。</p><p>五月天深深受到英国摇滚乐团披头四的影响，认为摇滚乐拥有改变世界的力量，在歌曲中传达爱以及和平的信念。</p><p>1998年－99年（五月天正式出道年）：地下到主流<br>参加野台开唱后，乐团开始将录制的试听带（demo）送到各大唱片公司，希望争取出片的机会。</p><p>1997年6月，台湾滚石唱片的制作人李宗盛在听过试听带〈志明与春娇〉后，与团长怪兽联络，两个月后五月天就与滚石签约 [6]。</p><p>1998年1月乐团参与了角头音乐所发行《ㄞ国歌曲》地下乐团的合辑台湾同志音乐创作2-《拥抱》，于同年7月发行该专辑；其中收录了五月天作品〈拥抱〉、〈爱情的模样〉、〈透露〉，该专辑歌词与现有专辑作品有稍做修改，大部分词曲都是由五月天担任，并包办所有制作及录音工作。</p><p>1999年冠佑正式加入五月天。同年7月7日正式推出首张专辑《五月天第一张创作专辑》，由滚石唱片发行。这张专辑在乐评和一般听众之间获得优秀评价，销售超过30万张 [7]，并入围第十一届金曲奖的“最佳演唱团体奖”[8]。〈志明与春娇〉和〈拥抱〉两首歌曲很快在年轻听众之间流行，成为KTV点播排行榜的年度冠军 [9]。〈志明与春娇〉并为该年度中华音乐人交流协会的年度十大单曲之一。</p><p>首张专辑发行后不久，1999年8月28日乐团于台北市立体育场举办了第一次的大型演唱会“第168场演唱会”，吸引许多支持者参加，成为台湾著名的乐团。</p><p>参考@muyunyun给出的教程，可以进行如下设置。首先安装hexo-all-minifier，这个模块集成了对 html、css、js、image 的优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 常用命令总结</title>
    <link href="https://hnyang.me/2018/12/17/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://hnyang.me/2018/12/17/Git 常用命令总结/</id>
    <published>2018-12-17T07:49:31.858Z</published>
    <updated>2019-01-10T14:45:30.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、查看最近提交的日志"><a href="#1、查看最近提交的日志" class="headerlink" title="1、查看最近提交的日志"></a>1、查看最近提交的日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p>可以得到类似下面的输出：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9srbu21tj30ob03paax.jpg" alt=""><br>其中左边的表示Git的<code>commit id</code>，是一个SHA1计算出来的一个非常大的数字，用十六进制表示，在<code>Pycharm 2018.3.1 (Community Edition)</code>版本之后，可以在<code>Version Control</code> 中看到时间线：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy9t24zrnbj30qd04xaax.jpg" alt=""></p><p><strong><em>注意：<code>git log</code>只能看到以当前版本为起点的之前所有版本的信息</em></strong><br><strong><em>想要看到所有的操作记录，使用<code>git reflog</code></em></strong></p><h2 id="2、版本退回"><a href="#2、版本退回" class="headerlink" title="2、版本退回"></a>2、版本退回</h2><p>###2.1 退回历史版本<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy9tjlfcohj30qe04xq3t.jpg" alt=""></p><p><center><small>此时<code>master</code>指向了<code>HEAD^</code></small></center><br>Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>88269a...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code></p><h3 id="2-2-退回未来版本"><a href="#2-2-退回未来版本" class="headerlink" title="2.2 退回未来版本"></a>2.2 退回未来版本</h3><p>首先用<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p></p><p>找到所有操作的历史记录<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9ufw7qlbj30mx01zt94.jpg" alt=""><br>左边指的是操作完之后的版本ID，要退回初始版本，则<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 88269ab4</span><br></pre></td></tr></table></figure><p></p><p>也可以在<code>Pycharm</code>中可视化操作</p><h2 id="3、分支创建与合并"><a href="#3、分支创建与合并" class="headerlink" title="3、分支创建与合并"></a>3、分支创建与合并</h2><h3 id="3-1-dev分支创建"><a href="#3-1-dev分支创建" class="headerlink" title="3.1 dev分支创建"></a>3.1 <code>dev</code>分支创建</h3><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支(<code>HEAD</code>分支)的提交点：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9vqh1258j308d0473yd.jpg" alt=""></p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy9w9ew1h7j30a706hwee.jpg" alt=""><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p></p><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">'dev'</span></span><br></pre></td></tr></table></figure><p></p><p>Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！<br>用<code>git branch</code>命令查看当前分支：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="3-2-分支合并"><a href="#3-2-分支合并" class="headerlink" title="3.2 分支合并"></a>3.2 分支合并</h3><h4 id="3-2-1-Fast-forward-模式"><a href="#3-2-1-Fast-forward-模式" class="headerlink" title="3.2.1 Fast forward 模式"></a>3.2.1 Fast forward 模式</h4><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy9wgv7a96j30dq06ha9z.jpg" alt=""><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">"branch test"</span></span><br><span class="line">[dev b17d20e] branch <span class="built_in">test</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p></p><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回master分支：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9x49ylsgj30bn0663yf.jpg" alt=""><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br></pre></td></tr></table></figure><p></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把dev合并到master上。最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9wjymvaaj30br0663yf.jpg" alt=""><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p></p><h4 id="3-2-2-禁用Fast-forward模式"><a href="#3-2-2-禁用Fast-forward模式" class="headerlink" title="3.2.2 禁用Fast forward模式"></a>3.2.2 禁用Fast forward模式</h4><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy9yno8rukj30dq06haa1.jpg" alt=""><br>在这种情况下若想保留 <code>dev</code>的信息，则应该用<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fy9yopafwsj30dc075web.jpg" alt=""><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span><br></pre></td></tr></table></figure><p></p><p>因为生成新的路径，需要<code>commit</code>.</p><hr><h3 id="3-3-分支删除"><a href="#3-3-分支删除" class="headerlink" title="3.3 分支删除"></a>3.3 分支删除</h3><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fy9wmeqxmlj30br04fdfp.jpg" alt=""><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure><p></p><h3 id="3-4-分支策略"><a href="#3-4-分支策略" class="headerlink" title="3.4 分支策略"></a>3.4 分支策略</h3><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy9yt6aoe5j30du03ha9w.jpg" alt=""></p><ul><li><code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</li><li>每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了；</li></ul><h2 id="4、版本冲突"><a href="#4、版本冲突" class="headerlink" title="4、版本冲突"></a>4、版本冲突</h2><p>如果遇到这种情况<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fy9xjvysahj30bt07k3yc.jpg" alt=""><br>则Git无法执行“快速合并”，只能试图把各自的修改合并起来，Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，用<code>git status</code>找到冲突文件，需在冲突文件上手动修改<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fy9xnf04icj30fb07kmx0.jpg" alt=""><br>这样才解决了冲突，用<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p></p><p>可以看到分支合并情况</p><h2 id="5、基本命令图解"><a href="#5、基本命令图解" class="headerlink" title="5、基本命令图解"></a>5、基本命令图解</h2><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fya0kscjvvj30eq0csq41.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、查看最近提交的日志&quot;&gt;&lt;a href=&quot;#1、查看最近提交的日志&quot; class=&quot;headerlink&quot; title=&quot;1、查看最近提交的日志&quot;&gt;&lt;/a&gt;1、查看最近提交的日志&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker常用命令总结</title>
    <link href="https://hnyang.me/2018/12/16/5.%20Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://hnyang.me/2018/12/16/5. Docker常用命令总结/</id>
    <published>2018-12-16T12:43:05.598Z</published>
    <updated>2019-01-13T08:06:50.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Docker简介"><a href="#1、Docker简介" class="headerlink" title="1、Docker简介"></a>1、Docker简介</h2><p>下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fy8w25e23fj30j8079my5.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy8w3pug5oj30j505f75a.jpg" alt=""></p><h2 id="2、获取镜像"><a href="#2、获取镜像" class="headerlink" title="2、获取镜像"></a>2、获取镜像</h2><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p>上大校内可以搭建私人镜像仓库，方便的在校内搭建docker环境，镜像仓库<code>mirrors.hoc.ccshu.net</code>位于校内网络， 已经启用<code>HTTPS</code>，校内用户的电脑无需进行配置，连上校园网即可进行访问。</p><p>例如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull hub.hoc.ccshu.net/project/buptbbsspider:latest</span><br></pre></td></tr></table></figure><p></p><p>对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</p><h2 id="3、查看镜像"><a href="#3、查看镜像" class="headerlink" title="3、查看镜像"></a>3、查看镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="4、删除镜像"><a href="#4、删除镜像" class="headerlink" title="4、删除镜像"></a>4、删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure><h2 id="3、运行docker"><a href="#3、运行docker" class="headerlink" title="3、运行docker"></a>3、运行docker</h2><p>有了镜像后，我们就能够以这个镜像为基础启动并运行一个容器（可以理解为一个Linux系统），例如：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm hnyang/buptbbsspider /bin/bash</span><br></pre></td></tr></table></figure><p></p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li><li>也可以添加参数 <code>-d</code>使其后台运行，返回其容器ID（再进入容器用<code>docker attach 容器ID</code>）</li></ul><p><em><strong>注意：</strong></em></p><p>就算使用了 <code>-d</code> 参数 然后用<code>attach</code>命令返回容器，再次用 <code>exit</code> 命令退出时，容器还是会删除，所以<strong>如果想要容器正常退出不关闭容器，请按 <code>Ctrl+P+Q</code> 进行退出容器</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、Docker简介&quot;&gt;&lt;a href=&quot;#1、Docker简介&quot; class=&quot;headerlink&quot; title=&quot;1、Docker简介&quot;&gt;&lt;/a&gt;1、Docker简介&lt;/h2&gt;&lt;p&gt;下面的图片比较了 Docker 和传统虚拟化方式的不同之处。传统虚拟机技术是
      
    
    </summary>
    
    
  </entry>
  
</feed>
