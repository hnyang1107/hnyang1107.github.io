<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FreeMind</title>
  
  <subtitle>「求知若饥，虚心若愚」</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.yanghn.com/"/>
  <updated>2019-11-14T07:40:54.952Z</updated>
  <id>https://blog.yanghn.com/</id>
  
  <author>
    <name>yanghn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>交互式可视化利器：HoloViews</title>
    <link href="https://blog.yanghn.com/posts/43158/"/>
    <id>https://blog.yanghn.com/posts/43158/</id>
    <published>2019-05-14T05:20:38.000Z</published>
    <updated>2019-11-14T07:40:54.952Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“Making data analysis and visualization seamless and simple”</p><p><img src="" alt="" style="width:85%"></p><a id="more"></a><p>在了解 HoloViews 之前，我们先看一张图：</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-05-14-053159.png" alt="" style="width:90%"></p><p>这张图是 PyCon 2017 的相关演讲，主题是 “<a href="https://www.youtube.com/watch?v=FytuB8nFHPQ" target="_blank" rel="noopener">The Python Visualization Landscape</a>“，其中介绍了一些 Python 可视化库的基本架构与分布.</p><p>python可视化库可以大致分为几类：</p><ul><li>基于 matplotlib 的可视化库</li><li>基于 JS 的可视化库</li><li>基于上述两者或其他组合功能的库</li></ul><p>matplotlib 是 python可视化库的基础。matplotlib 库的设计参考了 matlab，但其有两个主要缺点：</p><ul><li>学习成本比较高</li><li>对网页以及交互式绘图的支持较弱</li></ul><p>而基于 JS 的可视化库可以解决这些问题，基于 JavaScript 的可视化程序只需要一个浏览器即可实现，复杂的交互也轻而易举，比较常用的是 Bokeh 和 Plotly，Bokeh (Bokeh.js) 是一个 Python 交互式可视化库，支持现代化 Web 浏览器，提供非常完美的展示功能。Bokeh 的目标是使用 D3.js样式提供优雅，简洁新颖的图形化风格，同时提供大型数据集的高性能交互功能。Boken 可以快速的创建交互式的绘图，仪表盘和数据应用。</p><p>而 最顶端的的 HoloViews 结合了这些库，其哲学思想是 <span class="label primary">"用最简单的方式让数据本身去表达自己"</span>，而且它包含丰富的可组合元素库，可以覆盖、嵌套和轻松定位。同时，它还支持快速数据探索。</p><p>HoloViews 可以和 Seaborn、Pandas 或者 Bokeh 组合使用。</p><p>##</p><p>##</p><p>##</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“Making data analysis and visualization seamless and simple”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; style=&quot;width:85%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.yanghn.com/tags/Python/"/>
    
      <category term="HoloViews" scheme="https://blog.yanghn.com/tags/HoloViews/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB 笔记</title>
    <link href="https://blog.yanghn.com/posts/52233/"/>
    <id>https://blog.yanghn.com/posts/52233/</id>
    <published>2019-04-07T14:37:00.000Z</published>
    <updated>2019-11-14T13:11:11.292Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="" alt="" style="width:85%"></p><a id="more"></a><div class="note warning"><ul><li>与其他编程语言不同，MATLAB 是从 1 开始索引的，通过括号进行索引: <code>A(1)</code></li><li>一般来说有个 <code>dim</code> 参数，类似于 numpy 中 <code>axis</code> 参数，<code>1</code> 表示计算每列，<code>2</code> 表示计算每行，如 <code>mean(A,1)</code>: 计算每一列的均值，返回一个行向量</li></ul></div><h2 id="矩阵基本操作"><a href="#矩阵基本操作" class="headerlink" title="矩阵基本操作"></a>矩阵基本操作</h2><ul><li><strong>将矩阵 A 列向量化</strong>：<code>A(:)</code></li><li><strong>将矩阵 A B 横着合并</strong>：<code>[A B]</code></li><li><strong>将矩阵 A B 竖着合并</strong>：<code>[A; B]</code></li><li><strong>所有列求和</strong>：<code>sum(A,2)</code></li></ul><h2 id="画图操作"><a href="#画图操作" class="headerlink" title="画图操作"></a>画图操作</h2><ul><li><strong>标记 x 轴</strong>：<code>xlabel(&#39;time&#39;)</code></li><li><strong>标记 y 轴</strong>：<code>ylabel(&#39;time&#39;)</code></li><li><strong>给 x 轴 y 轴修改坐标轴范围</strong>：<code>axis([0.5 1 -1 1])</code>（x 0.5 到 1，y -1 到 1）</li><li><strong>标记曲线</strong>：<code>legend(&#39;sin&#39;, &#39;cos&#39;)</code></li><li><strong>保存文件</strong>：<code>print -dpng &#39;myplot.png&#39;</code></li><li><strong>画多图在同一figure中</strong>：<code>subplot(1,2,1)</code>（生成 1*2 的布局，首先画第一张图）</li><li><strong>对矩阵画图观察矩阵分布大小</strong>：<code>imagesc(A)</code>（通常配合 colorbar colormap gray 生成带灰度 bar 的矩阵数值大小分布图）</li><li><strong>在当前画图状态下继续画图</strong>：<code>hold on</code></li><li><strong>在新的画图状态下画图</strong>：<code>hold off</code><br>##</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; style=&quot;width:85%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技能" scheme="https://blog.yanghn.com/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="MATLAB" scheme="https://blog.yanghn.com/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>Python 进阶笔记</title>
    <link href="https://blog.yanghn.com/posts/47671/"/>
    <id>https://blog.yanghn.com/posts/47671/</id>
    <published>2019-03-21T06:14:53.000Z</published>
    <updated>2019-04-08T02:03:37.000Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“An interpreted, high-level, general-purpose programming language.”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-04-08-020131.png" alt="" style="width:70%"></p><a id="more"></a><h2 id="函数的参数1"><a href="#函数的参数1" class="headerlink" title="函数的参数1"></a>函数的参数<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2><div class="note warning"><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>Python 中一共有五种参数类型，分别是：位置参数（必选参数）、默认参数、可变参数、关键字参数和命名关键字参数，参数定义的顺序必须是：<strong>（位置参数）必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</strong></p></div><h3 id="必选参数（位置参数）"><a href="#必选参数（位置参数）" class="headerlink" title="必选参数（位置参数）"></a>必选参数（位置参数）</h3><p>指的是在给函数传参数时，按照顺序，依次传值。</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>就是在写函数的时候直接给参数传默认的值，调用的时候，默认参数已经有值，就不用再传值了。默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><ol><li><strong>必选参数在前，默认参数在后</strong>，否则 Python 的解释器会报错，因为如果默认参数在前传递一个新的值，由于前面的默认参数有了默认值， Python 不知道到底是更新默认参数还是给必选参数。</li><li>当函数有多个参数时，把 <strong>变化大的参数放前面，变化小的参数放后面</strong>。变化小的参数就可以作为默认参数。</li><li><strong>默认参数必须指向不变对象！</strong> 因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</li></ol><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><h2 id="类与实例"><a href="#类与实例" class="headerlink" title="类与实例"></a>类与实例</h2><ul><li><code>__str__</code>和<code>__repr__</code>方法： <code>__str__</code>方法 print 该对象时会被调用，是给用户看的，<code>__repr__</code>直接输入对象查看该对象属性，是给开发看的</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000" target="_blank" rel="noopener">廖雪峰的官方网站</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">python3-cookbook</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“An interpreted, high-level, general-purpose programming language.”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-04-08-020131.png&quot; alt=&quot;&quot; style=&quot;width:70%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技能" scheme="https://blog.yanghn.com/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://blog.yanghn.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CS229 笔记【0】：机器学习中的数学</title>
    <link href="https://blog.yanghn.com/posts/33591/"/>
    <id>https://blog.yanghn.com/posts/33591/</id>
    <published>2019-03-20T18:35:40.000Z</published>
    <updated>2019-04-09T01:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><a id="more"></a><h2 id="线性代数与矩阵分析"><a href="#线性代数与矩阵分析" class="headerlink" title="线性代数与矩阵分析"></a>线性代数与矩阵分析</h2><div class="note primary"><p>了解一定的线性代数会对机器学习有很好的理解，本章主要参考 <a href="https://hnyang.oss-cn-shanghai.aliyuncs.com/Linear%20Algebra%20Review%20and%20Reference.pdf" target="_blank"><i class="fa fa-download"></i><span>课程补充材料</span> </a>，基本的大学线性代数知识在这里不做详细讨论，这篇笔记算是对材料做一个补充和翻译.</p></div><h3 id="可逆矩阵与奇异矩阵"><a href="#可逆矩阵与奇异矩阵" class="headerlink" title="可逆矩阵与奇异矩阵"></a>可逆矩阵与奇异矩阵</h3><blockquote><p><strong>逆矩阵</strong>（inverse matrix）: 给定一个 $n$ 阶方阵 $\mathbf {A}$，若存在一 $n$ 阶方阵 $\mathbf {B}$ ，使得 $\mathbf{AB}=\mathbf{BA}=\mathbf{I}_n$，则称 $\mathbf{A}$ 是可逆的，且 $\mathbf {B}$ 是 $\mathbf{A}$ 的逆矩阵，记作 $\mathbf {A} ^{-1}$。</p></blockquote><p>而可逆矩阵叫做 <strong>非奇异矩阵（non-singular）</strong>，在数学中，“奇异”（singular）一词用来形容破坏了某种优良性质的数学对象。对于矩阵来说，“可逆”是一个好的性质，不可逆的矩阵就称为“奇异”矩阵，可以这样按两方面简单理解，我们知道，如果一个 $n$ 阶方阵的列向量线性无关，那么这个矩阵可逆。如果一个矩阵不可逆，说明列向量线性相关，即某个列向量可以被其余列向量线性表示，而线性表示可以理解为按列向量排列的线性空间中的点具有某种“共低维（小于 $n$ 维度）空间的性质”（一个 $2\times 2$ 的矩阵不可逆表示列向量共线，一个 $3\times 3$ 方阵不可逆表示列向量共面），这样对于一个 $n$ 维空间的向量来说其实是非常 <strong>“奇异”</strong> 的，所以， <strong>不可逆矩阵叫做一个奇异矩阵。</strong><br>我们也知道，若 $A$ 不可逆，则 $|A|=0$，材料中用“体积”方法直观的解释了行列式的几何意义：</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-21-032945.jpg" width="35%" height="50%"></p><p>上图中阴影部分的面积表示了一个二阶矩阵的一个行列式的值，若这个矩阵不可逆，两个向量线性相关，说明两个向量共线，这也说明阴影部分的面积为 $0$，故 <strong>不可逆矩阵的行列式为 $0$</strong>，而二维空间中两个向量共线是非常“奇异的”，所以 <strong>不可逆矩阵叫做一个奇异矩阵。</strong></p><h3 id="二次型与半正定矩阵"><a href="#二次型与半正定矩阵" class="headerlink" title="二次型与半正定矩阵"></a>二次型与半正定矩阵</h3><blockquote><p>对于一个方阵 $A \in \mathbb{R}^{n \times n}$ 和向量 $x \in \mathbb{R}^{n}$，标量 $x^{T} A x$ 叫做一个二次型</p></blockquote><p>按这种定义，则有：<br>$$x^{T} A x=\sum_{i=1}^{n} \sum_{j=1}^{n} A_{i j} x_{i} x_{j}$$<br>就相当于对矩阵 $A$ 所有元素都计算为二次项系数，由于对于只考虑 $i,j$ 位置的和，所以 $i,j$ 和 $j,i$ 的系数可以一分为二，故 $A$ 可以人为的构造成一个 <strong>对称矩阵</strong>，例如：</p><p>$$\begin{pmatrix}<br>x \\<br>y<br>\end{pmatrix}<br>\begin{pmatrix}<br>1 &amp; 2 \\<br>3 &amp; 4 \\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x &amp; y<br>\end{pmatrix} = x^2+5xy+4y^2 = \begin{pmatrix}<br>x \\<br>y \\<br>\end{pmatrix}<br>\begin{pmatrix}<br>1 &amp; 5/2 \\<br>5/2 &amp; 4 \\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x &amp; y<br>\end{pmatrix}<br>$$<br></p><div class="note warning no-icon"><ul><li>一个正定矩阵一定是一个可逆矩阵</li><li>对于矩阵$A \in \mathbb{R}^{m \times n}$，矩阵 $G=A^{T} A$ 叫做 <strong>Gram matrix</strong>，而对于一个列满秩（“竖长的矩阵”）矩阵 $A$，$x^{T} A^{T}A x$ 是一个半正定二次型，而当 $A x=0$ 时二次型等于零，由于 $A$ 列满秩，故二次型等于零 $x$ 无解，故 <strong>Gram matrix</strong> 是个正定矩阵，即是一个可逆矩阵。一般来说把 $A$ 看做训练集，训练集中样本数远大于特征数，所以 $A$ 一般是个列满秩矩阵.</li></ul></div><p></p><h3 id="特征值与特征向量"><a href="#特征值与特征向量" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h3><blockquote><p>给定一个 $A \in \mathbb{R}^{n \times n}$，$$A x=\lambda x, \quad x \neq 0$$ 则称 $\lambda \in \mathbb{C}$ 为矩阵 $A$ 的特征值，$x \in \mathbb{C}^{n}$ 为对应特征值的特征向量.</p></blockquote><p>在技术上，我们一般是通过计算 $|(\lambda I-A)|=0$ 找到其特征值与特征向量，关于特征值与特征向量，有以下一些性质：<br></p><div class="note warning no-icon"><ul><li>矩阵的迹等于特征向量之和：$\operatorname{tr} A=\sum_{i=1}^{n} \lambda_{i}$</li><li>矩阵的行列式等于迹的乘积：$|A|=\prod_{i=1}^{n} \lambda_{i}$</li><li>对角矩阵 $D=\operatorname{diag}\left(d_{1}, \ldots d_{n}\right)$ 的特征值为 $d_{1}, \ldots d_{n}$.</li><li>对称矩阵的所有特征值都为实数，且其特征向量标准正交</li></ul></div><p></p><p>我们可以把所有的特征向量写在同一个矩阵 $X$ 中，可以写成：<br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-22-010134.jpg" width="60%" height="100%">可以得到：$$<br>A X=X \Lambda$$，若 $A$ 是对称矩阵，则 $U$ 是一个正交阵，$A=U \Lambda U^{T}$，可以得到：<br>$$ x^{T} A x=x^{T} U \Lambda U^{T} x=y^{T} \Lambda y=\sum_{i=1}^{n} \lambda_{i} y_{i}^{2}$$</p><p>而这一步就相当于二次型在配方，所以二次型的正定型取决于对称矩阵的特征值.</p><h3 id="矩阵微分"><a href="#矩阵微分" class="headerlink" title="矩阵微分"></a>矩阵微分</h3><blockquote><p>定义 $f : \mathbb{R}^{m \times n} \rightarrow \mathbb{R}$ 是一个矩阵到实数的一个映射，<br>$$\nabla_{A} f(A) \in \mathbb{R}^{m \times n}=\left[ \begin{array}{cccc}{\frac{\partial f(A)}{\partial A_{11}}} &amp; {\frac{\partial f(A)}{\partial A_{12}}} &amp; {\cdots} &amp; {\frac{\partial f(A)}{\partial A_{1}}} \\ {\frac{\partial f(A)}{\partial A_{21}}} &amp; {\frac{\partial f(A)}{\partial A_{22}}} &amp; {\cdots} &amp; {\frac{\partial f(A)}{\partial A_{2 n}}} \\ {\vdots} &amp; {\vdots} &amp; {\ddots} &amp; {\vdots} \\ {\frac{\partial f(A)}{\partial A_{m 1}}} &amp; {\frac{\partial f(A)}{\partial A_{m 2}}} &amp; {\cdots} &amp; {\frac{\partial f(A)}{\partial A_{m n}}}\end{array}\right]$$</p></blockquote><p>对于一个一个标量求梯度输出也是一个矩阵，其维数应该等于其输入的维数，所以到底谁是输入的矩阵是非常重要的，例如对于系数矩阵$A$ 和一个实向量变元$x$，对于 $\nabla f(A x)$ 可以认为输入的维数是和 $Ax$ 相同，所以输出的梯度不是一个与 $x$ 维度相等的向量，也可以认为输入的矩阵是 $x$，所以输出应该是一个矩阵，这两种方式理解都正确，类似于微积分中 $f(ax)$ 的 导数一样，要明确对谁求导数，可以这样规定：<br></p><div class="note danger no-icon"><ul><li>如果有下标，则对下标内的矩阵求梯度，即 $\nabla_{x} f(A x)$ 对 $x$ 求梯度，输出一个向量.</li><li>若没有下标，默认对括号内求梯度，即 $\nabla f(A x)$ 输出一个维度与 $Ax$ 相等的矩阵.</li></ul></div><p></p><h4><a href="#" class="headerlink"></a><span class="label primary">Hessian 矩阵</span></h4><p>与梯度类似，$$\nabla_{x}^{2} f(x) \in \mathbb{R}^{n \times n}=\left[ \begin{array}{cccc}{\frac{\partial^{2} f(x)}{\partial x_{1}^{2}}} &amp; {\frac{\partial^{2} f(x)}{\partial x_{1} \partial x_{2}}} &amp; {\cdots} &amp; {\frac{\partial^{2} f(x)}{\partial x_{1} \partial x_{n}}} \\ {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{1}}} &amp; {\frac{\partial^{2} f(x)}{\partial x_{2}^{2}}} &amp; {\cdots} &amp; {\frac{\partial^{2} f(x)}{\partial x_{2} \partial x_{n}}} \\ {\vdots} &amp; {\vdots} &amp; {\ddots} &amp; {\vdots} \\ {\frac{\partial^{2} f(x)}{\partial x_{n} \partial x_{1}}} &amp; {\frac{\partial^{2} f(x)}{\partial x_{n} \partial x_{2}}} &amp; {\cdots} &amp; {\frac{\partial^{2} f(x)}{\partial x_{n}^{2}}}\end{array}\right]$$<br>这个矩阵是一个对称矩阵，不能看做梯度的梯度，因为梯度本身就是一个向量，向量没法求其梯度，几个有用的结论：<br></p><div class="note warning no-icon"><ul><li>$\nabla_{x} b^{T} x=b$</li><li>$\nabla_{x} x^{T} A x=2 A x$ 若 $A$ 是对称矩阵</li><li>$\nabla_{x} x^{T} A x=(A^{T}+A) x$ 若 $A$ 是非对称矩阵</li><li>$\nabla_{x}^{2} x^{T} A x=2 A$ 若 $A$ 是对称矩阵</li><li>$\nabla_{A}|A|=(\operatorname{adj}(A))^{T}=|A| A^{-T}$</li><li>$\nabla_{A} \log |A|=\frac{1}{|A|} \nabla_{A}|A|=A^{-1}$(用到了链式法则)</li><li>$\nabla_{A} \operatorname{tr} A B=B^{T}$</li><li>$\nabla_{A^{T}} f(A)=\left(\nabla_{A} f(A)\right)^{T}$</li><li>$\nabla_{A} \operatorname{tr} A B A^{T} C=C A B+C^{T} A B^{T}$</li></ul></div><p></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://hnyang.oss-cn-shanghai.aliyuncs.com/%E3%80%8A%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%89%88%EF%BC%89%E5%BC%A0%E8%B4%A4%E8%BE%BE%E3%80%8BPDF.pdf" target="_blank"><i class="fa fa-download"></i><span>《矩阵分析与应用（第二版）张贤达》</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      A broad introduction to machine learning and statistical pattern recognition
    
    </summary>
    
      <category term="机器学习" scheme="https://blog.yanghn.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="https://blog.yanghn.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数学" scheme="https://blog.yanghn.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="cs229" scheme="https://blog.yanghn.com/tags/cs229/"/>
    
  </entry>
  
  <entry>
    <title>CS229 笔记【1】：线性模型</title>
    <link href="https://blog.yanghn.com/posts/41333/"/>
    <id>https://blog.yanghn.com/posts/41333/</id>
    <published>2019-03-18T06:06:46.000Z</published>
    <updated>2019-04-09T16:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A broad introduction to machine learning and statistical pattern recognition”</p><a id="more"></a><h2 id="机器学习的定义"><a href="#机器学习的定义" class="headerlink" title="机器学习的定义"></a>机器学习的定义</h2><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-18-144704.jpg" width="40%" height="50%"><br>在学习的过程中，学习算法试图通过训练数据集中的样本产生一个可以预测 $y$ 的预测系统，这个过程就叫做机器学习。</p><h2 id="训练样本与符号说明"><a href="#训练样本与符号说明" class="headerlink" title="训练样本与符号说明"></a>训练样本与符号说明</h2><p>规定 $X$ 表示训练集，$y$ 表示标签（一般大写字母表示矩阵，小写字母表示向量）<br></p><div class="note primary no-icon"><ul><li>$m$ = # training exmples.(训练样本个数，表的行数)</li><li>$n$ = # features.(特征个数，表的列数)</li><li>$(x,y)$ = “training example”</li><li>$(x^{(i)},y^{(i)})$ = 第 $i$ 个训练样本. (表的第 $i$ 行)</li></ul></div><p></p><p>线性模型试图通过特征的线性组合来进行预测，即</p><p>$$f(\boldsymbol{x})=w_0 + w_{1} x_{1}+w_{2} x_{2}+\ldots+w_{n} x_{n}$$<br>$w_0$ 叫做截距（intercept）如果不加上 $w_0$，当所有特征取 0 的时候训练集的标签一定为 0，这种假设显然是不合理的，为了统一写成样本的线性组合形式，我们人为地增加一维特征写成 $x_0=1$，所以上式写成：<br>$$f(\boldsymbol{x})=w_0x_0 + w_{1} x_{1}+w_{2} x_{2}+\ldots+w_{n} x_{n}\ \ \ (x_0=1)$$<br>写成矩阵形式为：<br>$$<br>X=\left[ \begin{array}{c}{1 \ —\left(x^{(1)}\right)^{T}}— \\ {1 \ —\left(x^{(2)}\right)^{T}—} \\ {\vdots} \\ {1 \ —\left(x^{(m)}\right)^{T}–}\end{array}\right]_{m\times (n+1)}<br>$$<br>一般 $X$ 是一个 $m\times (n+1)$ 的矩阵，$n+1$ 维的特征，$m$ 个训练样本，而我们样本所对应的标签 $y$ 为：<br>$$<br>y=\left[ \begin{array}{c}{y^{(1)}} \\ {y^{(2)}} \\ {\vdots} \\ {y^{(m)}}\end{array}\right]<br>$$<br>我们的目的就是找到一个参数向量 $\theta = \left[ \theta_0,\theta_1,\cdots\theta_n\right]^{T}$，使得我们估计值 $\boldsymbol{f}(X)$：<br>$$\boldsymbol{f}(X)=\left[ \begin{array}{c}{1 \ —\left(x^{(1)}\right)^{T}}— \\ {1 \ —\left(x^{(2)}\right)^{T}—} \\ {\vdots} \\ {1 \ —\left(x^{(m)}\right)^{T}–}\end{array}\right]\cdot\left[ \begin{array}{c}{\theta_0 \\ \theta_1 \\ {\vdots} \\ \theta_n}\end{array}\right]=X\theta$$<br>与我们样本中的 $y$ 最接近，s</p><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>对于线性回归，我们假设参数和输入的特征服从线性函数，也就是说<br>$$<br>h(x)=\sum_{i=0}^{n} \theta_{i} x_{i}=\theta^{T} x<br>$$<br>这里假定 $x_0=1$，定义其损失函数为偏离输出变量的平方和，也就是<br>$$<br>J(\theta)=\frac{1}{2} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A broad introduction to machine learning and statistical pattern recognition”&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="https://blog.yanghn.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CS229" scheme="https://blog.yanghn.com/tags/CS229/"/>
    
      <category term="机器学习" scheme="https://blog.yanghn.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>NetworkX 笔记</title>
    <link href="https://blog.yanghn.com/posts/53355/"/>
    <id>https://blog.yanghn.com/posts/53355/</id>
    <published>2019-03-11T00:26:40.000Z</published>
    <updated>2019-11-14T13:33:30.119Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A Python package for complex networks”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-11-14-133257.jpg" alt="" style="width:70%"></p><a id="more"></a><div class="note warning"><p>当前 Networkx 版本为 <code>0.24</code></p></div><h2 id="一、网络的基本属性"><a href="#一、网络的基本属性" class="headerlink" title="一、网络的基本属性"></a>一、网络的基本属性</h2><h3 id="1-1-网络的类型"><a href="#1-1-网络的类型" class="headerlink" title="1.1 网络的类型"></a>1.1 网络的类型</h3><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-10-17-152144.jpg" alt=""></p><h3 id="1-2-连通性："><a href="#1-2-连通性：" class="headerlink" title="1.2 连通性："></a>1.2 连通性：</h3><ul><li>判断是否连通：<code>nx.is_connected(G)</code></li><li>取网络中最大连通子图：<code>Gc = G.subgraph(max(nx.connected_components(G), key=len)).copy()</code></li></ul><h3 id="1-3-给网络、节点、连边增加属性"><a href="#1-3-给网络、节点、连边增加属性" class="headerlink" title="1.3 给网络、节点、连边增加属性"></a>1.3 给网络、节点、连边增加属性</h3><p><strong><span class="label primary">给整个网络增加属性 ：</span></strong></p><ul><li>在网络生成时给网络增加属性：<code>G = nx.Graph(day=&quot;Friday&quot;)</code></li><li>在网络生成之后修改网络属性：<code>G.graph[&#39;day&#39;] = &quot;Monday&quot;</code></li><li>显示网络属性：<code>G.graph</code></li></ul><p><strong><span class="label primary">给点增加属性 ：</span></strong></p><ul><li>在网络生成时添加点属性：<code>G.add_node(1, time=&#39;5pm&#39;)</code>、<code>G.add_nodes_from([3], time=&#39;2pm&#39;)</code>(因为有一个关键字参数 <code>**attr</code>)</li><li>在网络生成之后修改点属性：<code>G.nodes[1][&#39;room&#39;] = 714</code></li><li>显示点属性：<code>G.nodes.data()</code></li><li>网络的度：<code>G.degree()</code>，如果无参数则返回所有节点的名称与其度值（<code>DegreeView</code>），若参数为一个节点名称，则返回改节点的度，若参数为节点序列，则返回节点名称与节点的度</li></ul><div class="note warning"><p><code>[d for n, d in G.degree()]</code>：返回所有节点的度值</p></div><h2 id="二、二分图"><a href="#二、二分图" class="headerlink" title="二、二分图"></a>二、二分图</h2><p>由于 NetworkX 没有一个自定义的二分图类型，所以所有的二分图都是 <code>Graph()</code> 或者 <code>DiGraph()</code> 类型，详细内容可参考 <a href="https://networkx.github.io/documentation/stable/reference/algorithms/bipartite.html" target="_blank" rel="noopener">Bipartite</a></p><ul><li><strong>检测图的二分性</strong>：<code>networkx.is_bipartite()</code></li><li><strong>分割二分图</strong>：<code>bottom_nodes, top_nodes = bipartite.sets(B)</code></li></ul><div class="note warning"><p>只有网络连通时分割结果才没有歧义，若网络不连通，则应该根据节点属性进行分割：<br><code>top_nodes = {n for n, d in B.nodes(data=True) if d[&#39;bipartite&#39;]==0}</code><br><code>bottom_nodes = set(B) - top_nodes</code></p></div><p><strong><span class="label primary">投影（projection） ：</span></strong></p><ul><li><strong>投影为 <code>Graph</code> 或 <code>MultiGraph</code></strong>：<code>projected_graph(B, nodes, multigraph=False)</code> 只考虑在 <code>nodes</code> 上构造的网络，若某两个点在 <code>B</code> 中有相同的邻居，则投影图中相邻，若有多个相邻的点，<code>multigraph</code> 参数决定了是否构造为 <code>MultiGraph</code>.（<code>B</code> 不需要要求为二分图，任意图都可以进行投影）</li><li></li></ul><h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><ul><li>按节点选取网络子图：<code>G.subgraph(nodes)</code></li><li>TODO:</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A Python package for complex networks”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-11-14-133257.jpg&quot; alt=&quot;&quot; style=&quot;width:70%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="软件技能" scheme="https://blog.yanghn.com/categories/%E8%BD%AF%E4%BB%B6%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://blog.yanghn.com/tags/Python/"/>
    
      <category term="NetworkX" scheme="https://blog.yanghn.com/tags/NetworkX/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 常用核心函数与方法</title>
    <link href="https://blog.yanghn.com/posts/55796/"/>
    <id>https://blog.yanghn.com/posts/55796/</id>
    <published>2019-02-20T10:53:43.000Z</published>
    <updated>2019-11-14T13:58:05.606Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A powerful Python data analysis toolkit”</p><a id="more"></a><div class="note warning"><p>当前 Pandas 版本为 <code>0.24.1</code></p></div><h2 id="数据选取、索引、采集"><a href="#数据选取、索引、采集" class="headerlink" title="数据选取、索引、采集"></a>数据选取、索引、采集</h2><ul><li><code>.loc</code>：利用索引定位，必须输入索引，输入索引不存在时会报错</li><li><code>.iloc</code>：i 表示 integer position，利用整数位置进行定位<div class="note primary"><p>若用 <code>df.loc</code>、 <code>df.iloc</code> 或者 <code>df[&#39;col&#39;]</code> 选取子集，是选取了原来 <code>dataframe</code> 的视图而不是副本，修改这个子集会修改原来的 <code>dataframe</code> ，所以要选取副本，再加上 <code>.copy()</code> 可创建副本，有时候 <code>Pandas</code> 会抛出 <code>SettingWithCopyWarning</code> 的警告，绝大部分是因为副本视图问题造成的。</p></div></li><li><strong>选取多行</strong>：<code>df.loc[[index_name1,index_name2]]</code></li><li><strong>选取多列</strong>：<code>df[[col_name1, col_name2]]</code></li><li><strong>正则表达式选取</strong>：<code>df[&#39;new_col&#39;] = df[&#39;col&#39;].str.extract(&#39;regex&#39;)</code> 按照 <code>regex</code> 正则表达式选取 <code>col</code> 列中每一元素，结果保存在 <code>new_col</code> ，查看更多请点击 <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.str.extract.html" target="_blank" rel="noopener"><code>pandas.Series.str.extract</code></a></li><li><strong>正则表达式替换文本</strong>：<code>df[&#39;col&#39;].str.replace(&#39;text&#39;,&#39;&#39;)</code>（将 <code>text</code> 文本替换为空文本，即删除特定的字符），关于字符串操作，可以参考 <a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/chapters/p02_strings_and_text.html" target="_blank" rel="noopener">python3-cookbook</a></li><li><strong>查找缺失数据</strong>：<code>df.isnull()</code>：对整个 <code>df</code> 判断是否为空，返回一张大表，这张表每个元素为布尔值，<code>True</code> 则为空值.</li><li><p><strong>判断某一列（行）是否存在缺失值</strong>：<code>df.loc[&#39;index&#39;].isnull().any()</code>，存在则返回 <code>True</code>，不存在则返回 <code>False</code>.</p><div class="note primary"><p>对于数据很大的表，用 <code>df.isnull()</code> 不方便看到缺失值的具体位置，配合 <code>pandas.Series.any()</code> 函数可以确定某一行或者某一列出现缺失值，（<code>axis=0</code>: index,<code>axis=1</code>: columns），<code>any()</code> 方法表示判断给定的 Series 是否全部为 <code>False</code> ，若全为 <code>False</code> 则返回 <code>False</code>，如果有一个为 <code>True</code>，则返回 <code>True</code>，所以当返回 <code>True</code> 表示这一行或者这一列有缺失值</p></div></li><li><p><strong>判断某行（列）是否存在缺失数据</strong>：<code>df.loc[&#39;index&#39;].isnull().any()</code></p></li><li><strong>行循环</strong>：<code>for index, row in df.iterrows():</code></li></ul><h2 id="数据修改、删除、映射"><a href="#数据修改、删除、映射" class="headerlink" title="数据修改、删除、映射"></a>数据修改、删除、映射</h2><ul><li><strong>生成一个数据表</strong>：<code>df = pd.DataFrame(data={&#39;col1&#39;:[1,2,3],&#39;col2&#39;:[4,5,6]})</code></li><li><strong>增加一行</strong>：<code>df.loc[&#39;new_raw&#39;] = &#39;1&#39;</code></li><li><strong>增加一列</strong>：<code>df[&#39;new_colu&#39;]=&#39;1&#39;</code>.<div class="note danger no-icon"><p>按上面两种方式选取的子集为原来 <code>df</code> 的视图.</p></div></li><li><strong>删除一行</strong>：<code>df.drop(&#39;raw_name&#39;, axis=0, inplace=True)</code>，这里默认 <code>drop</code> 返回原 <code>df</code> 的视图，若设置 <code>inplace=True</code> 则修改 <code>df</code> 返回 <code>None</code>.</li><li><strong>删除一列</strong>：<code>df.drop(&#39;raw_name&#39;, axis=1, inplace=True)</code></li><li><strong>删除缺失数据</strong>：<code>df.dropna(axis=0, how=&#39;any&#39;, inplace=False, subset=[&#39;col&#39;])</code>. <code>axis=0</code> 表示检查这一行，按照 <code>how=&#39;any&#39;</code> (这一行只要出现了缺失，就删除)的方法删除这一行，<code>subset=[&#39;col&#39;]</code> 表示只检查 <code>col</code> 这一列是否有缺失值，<code>inplace=False</code> 表示删除后不替换原来的变量.</li></ul><ul><li><strong>修改列(行)名称</strong>：<code>df.rename(columns={&#39;old_col_name&#39;: &#39;new_col_name&#39;}, index={&#39;old_index_name&#39;: &#39;new_index_name&#39;},inplace=True)</code></li><li><strong>修改索引列名称</strong>：上面的方法无法改变索引列的名称，可以用 <code>df.index.name = &#39;new_name&#39;</code> 的方法.<div class="note warning"><p>凡是输入后返回一张表，说明原来带有 <code>inplace</code> 参数，如需替换则设置为 <code>True</code></p></div></li><li><strong>修改索引</strong>：<code>reset_index()</code> ，也可以将 MultiIndex 转换成普通的 Index.</li><li><strong>对索引排序</strong>：<code>df.sort_index()</code>，默认返回排序后的 <code>df</code>，可设置 <code>inplace</code> 参数.</li><li><strong>二级索引变成索引和列</strong>：<code>df.unstack()</code>，一般用在对两列的 <code>groupby</code>，之后转化为一级索引的 <code>DataFrame</code>，详情<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.unstack.html" target="_blank" rel="noopener">点击</a><h2 id="数据合并、连接、关系"><a href="#数据合并、连接、关系" class="headerlink" title="数据合并、连接、关系"></a>数据合并、连接、关系</h2></li></ul><h3 id="Concat-与-Append-操作"><a href="#Concat-与-Append-操作" class="headerlink" title="Concat 与 Append 操作"></a>Concat 与 Append 操作</h3><h3 id="Merge-操作"><a href="#Merge-操作" class="headerlink" title="Merge 操作"></a>Merge 操作</h3><h2 id="Group-By-技术"><a href="#Group-By-技术" class="headerlink" title="Group By 技术"></a>Group By 技术</h2><p>Pandas 提供了一个灵活高效的 groupby 功能，可以对某些标签或索引的局部进行累计分析，很多复杂的操作都可以化为 GroupBy 操作(不能保证是效率最高的).<br><a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html" target="_blank" rel="noopener">手册</a>上对于 GroupBy 主要可以分为以下三个步骤：<span class="label primary">分割-应用-组合</span><br></p><div class="note default no-icon"><ul><li>Splitting the data into groups based on some criteria.</li><li>Applying a function to each group independently.</li><li>Combining the results into a data structure.</li></ul></div><br><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-11-144156.jpg" alt="" style="width:80%"><br>上图表现了这种过程，而中间的分割过程不需要显式地暴露出来，这一点十分重要。而且 GroupBy(经常)只需要一行代码， 就可以计算每组的和、均值、计数、最小值以及其他累计值。GroupBy 的用处就是将这些步骤进行抽象: 用户不需要知道在底层如何计算，只要把操作看成一个整体就够了.<p></p><h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: df = pd.DataFrame(&#123;<span class="string">'X'</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>], <span class="string">'Y'</span>: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: df</span><br><span class="line">Out[<span class="number">2</span>]:</span><br><span class="line">   X  Y</span><br><span class="line"><span class="number">0</span>  A  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  B  <span class="number">4</span></span><br><span class="line"><span class="number">2</span>  A  <span class="number">3</span></span><br><span class="line"><span class="number">3</span>  B  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: df.groupby([<span class="string">'X'</span>])</span><br><span class="line">Out[<span class="number">3</span>]: &lt;pandas.core.groupby.groupby.DataFrameGroupBy object at <span class="number">0x1144ea198</span>&gt;</span><br></pre></td></tr></table></figure><p>可以看到，这里的返回值不是一个 DataFrame 对象，而是一个 <code>DataFrameGroupBy</code> 对象。 这个对象的魔力在于，你可以将它看成是一种特殊形式的 DataFrame，里面隐藏着若干组 数据，但是在没有应用累计函数之前不会计算。GroupBy 对象是一种非常灵活的抽象类型。在大多数场景中，可以将它看成是 DataFrame 的集合.<br></p><div class="note primary"><ul><li>默认情况下，GroupBy 对象会对 group keys 进行排序，如果分的组过多，可以设置 <code>groupby([&#39;X&#39;], sort=False)</code> 提高运行速度.</li><li>默认情况下对多列进行 GroupBy 会产生 <a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#advanced-hierarchical" target="_blank" rel="noopener">MultiIndex</a>，可以设置 <code>as_index=False</code> 取消生成 MultiIndex，也可以用 <code>.reset_index()</code> 来实现.</li></ul></div><p></p><p>利用 <code>get_group(&#39;group_name&#39;)</code> 方法获得某一分组的 <code>DataFrame</code>，还可以利用 <code>.groups</code> 属性获得包含所有分组的字典，字典的键为组名，例如：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">27</span>]: df.groupby(<span class="string">'A'</span>).groups</span><br><span class="line">Out[<span class="number">27</span>]: </span><br><span class="line">&#123;<span class="string">'bar'</span>: Int64Index([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], dtype=<span class="string">'int64'</span>),</span><br><span class="line"> <span class="string">'foo'</span>: Int64Index([<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>], dtype=<span class="string">'int64'</span>)&#125;</span><br></pre></td></tr></table></figure><br><span class="label info">这个属性可以用于组的循环：</span><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">57</span>]: grouped = df.groupby(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: <span class="keyword">for</span> name, group <span class="keyword">in</span> grouped:</span><br><span class="line">   ....:     print(name)</span><br><span class="line">   ....:     print(group)</span><br><span class="line">   ....: </span><br><span class="line">bar</span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">1</span>  bar    one  <span class="number">0.254161</span>  <span class="number">1.511763</span></span><br><span class="line"><span class="number">3</span>  bar  three  <span class="number">0.215897</span> <span class="number">-0.990582</span></span><br><span class="line"><span class="number">5</span>  bar    two <span class="number">-0.077118</span>  <span class="number">1.211526</span></span><br><span class="line">foo</span><br><span class="line">     A      B         C         D</span><br><span class="line"><span class="number">0</span>  foo    one <span class="number">-0.575247</span>  <span class="number">1.346061</span></span><br><span class="line"><span class="number">2</span>  foo    two <span class="number">-1.143704</span>  <span class="number">1.627081</span></span><br><span class="line"><span class="number">4</span>  foo    two  <span class="number">1.193555</span> <span class="number">-0.441652</span></span><br><span class="line"><span class="number">6</span>  foo    one <span class="number">-0.408530</span>  <span class="number">0.268520</span></span><br><span class="line"><span class="number">7</span>  foo  three <span class="number">-0.862495</span>  <span class="number">0.024580</span></span><br></pre></td></tr></table></figure><p></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="累计与求和"><a href="#累计与求和" class="headerlink" title="累计与求和"></a>累计与求和</h3><p>最常用的方法有 <code>.sum()</code> 和 <code>.size()</code>，<code>.sum()</code> 是对其余所有数值型的列全部求和，<code>.size()</code> 是只计算聚合的列的个数。<br>若对多列进行聚合，默认会把将要聚合的列当做一个 <a href="https://pandas.pydata.org/pandas-docs/version/0.22/advanced.html#advanced-hierarchical" target="_blank" rel="noopener">MultiIndex</a>，这是因为在 groupby 的时候包含一个默认属性 <code>as_index=True</code> 这样的好处有两点：</p><ol><li>加快运算速度</li><li>方便进一步的操作</li></ol><p>举例来说：<br></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">13</span>]: df = pd.DataFrame(data = &#123;<span class="number">1</span>:[<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>],<span class="number">2</span>:[<span class="string">'b'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'d'</span>,<span class="string">'c</span></span><br><span class="line"><span class="string">    ...: '</span>],<span class="number">3</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: df</span><br><span class="line">Out[<span class="number">14</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  a  b  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br><span class="line"><span class="number">4</span>  a  c  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>]).sum()</span><br><span class="line">Out[<span class="number">19</span>]:</span><br><span class="line">     <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">a b  <span class="number">2</span></span><br><span class="line">  c  <span class="number">1</span></span><br><span class="line">b a  <span class="number">1</span></span><br><span class="line">c d  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>],as_index=<span class="keyword">False</span>).sum()</span><br><span class="line">Out[<span class="number">20</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  a  c  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>而利用 <code>reset_index()</code> 可以达到同样的效果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>]).sum().reset_index()</span><br><span class="line">Out[<span class="number">24</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  a  c  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br></pre></td></tr></table></figure><div class="note danger"><p>但是对于 <code>.size()</code> 来说，设置 <code>reset_index()=False</code> 并没有效果，还是需要用 <code>reset_index()</code>，实际上，<code>DataFrameGroupBy</code> 对象 内置的<code>.size()</code> 方法返回的是一个 <code>Series</code> 对象而不是 <code>DataFrame</code></p></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>],as_index=<span class="keyword">False</span>).size() <span class="comment"># 依旧是 MultiIndex</span></span><br><span class="line">Out[<span class="number">18</span>]:</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span></span><br><span class="line">a  b    <span class="number">2</span></span><br><span class="line">   c    <span class="number">1</span></span><br><span class="line">b  a    <span class="number">1</span></span><br><span class="line">c  d    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: df.groupby([<span class="number">1</span>,<span class="number">2</span>]).size().reset_index()</span><br><span class="line">Out[<span class="number">25</span>]:</span><br><span class="line">   <span class="number">1</span>  <span class="number">2</span>  <span class="number">0</span></span><br><span class="line"><span class="number">0</span>  a  b  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  a  c  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  b  a  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  c  d  <span class="number">1</span></span><br></pre></td></tr></table></figure><p>若要将统计的 size 成为新的一列，可以使用 <code>.to_frame</code> 方法生成新的一列： <code>df = df.groupby([&#39;A&#39;,&#39;B&#39;]).size().to_frame(&#39;size&#39;)</code></p><h3 id="转换与应用"><a href="#转换与应用" class="headerlink" title="转换与应用"></a>转换与应用</h3><p><code>apply()</code> 方法让你可以在每个组上应用任意方法。这个函数输入一个 <code>DataFrame</code>，返回一个 <code>Pandas</code> 对象（ <code>DataFrame</code> 或 <code>Series</code> ）或一个标量（ <code>scalar</code>，单个数值），新版的 <code>Pandas</code> 可以 放入 <code>apply</code> 的参数，例如：<code>df.apply(f,alpha=0.1)</code></p><p>-[]<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#transformation" target="_blank" rel="noopener">这里开始</a></p><h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><div class="note primary"><h3 id="axis-取-0-还是-1？"><a href="#axis-取-0-还是-1？" class="headerlink" title="axis 取 0 还是 1？"></a>axis 取 0 还是 1？</h3><ul><li><code>axis=1</code> 表示按照行（index）的方向来，也就是说函数的输入为每一行，同理，<code>axis=0</code> 表示按照列（column）的方向来，也就是说函数的输入为每一列。</li><li><code>df.apply()</code> 输入 <code>0</code> 表示 apply 到每一列上去，输入 <code>1</code> 表示 apply 到每一行上去。</li><li><code>sum(axis=1)</code> 表示按行求和，<code>sum(axis=0)</code> 表示按列求和</li><li><code>drop(axis = 1)</code> 删除列</li></ul></div><div class="note primary"><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li>从开头匹配：表达式最前面加上<code>^</code></li><li>匹配年份：<code>(?!0000)[0-9]{4}</code></li></ul></div><div class="note primary"><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><code>Series.str</code> 可以广播某一字符串方法，适用于整个列或者行，而避免用 <code>apply</code> 函数.</li><li>在某一列寻找包含某一字符串 <code>&#39;str&#39;</code> 的数据：<code>df[df[&#39;content&#39;].str.contains(&#39;str&#39;, na=False)]</code>，由于 <code>contains</code> 返回布尔型数据，前面要再加上一个 <code>df</code>, <code>na=False</code> 表示若遇到缺失数据返回 <code>False</code>.</li><li><code>strip()</code> 方法能用于删除开始或结尾的字符。 <code>lstrip()</code> 和 <code>rstrip()</code> 分别从左和从右执行删除操作。 默认情况下，这些方法会去除空白字符，但是你也可以指定其他字符.</li></ul></div><h2 id="时间序列操作"><a href="#时间序列操作" class="headerlink" title="时间序列操作"></a>时间序列操作</h2><ul><li><strong>生成固定日期的时间序列</strong>：<code>pd.date_range</code></li><li><strong>生成固定时间段的时间序列</strong>：<code>pd.date_range</code></li></ul><h2 id="Kaggle-数据竞赛常用命令"><a href="#Kaggle-数据竞赛常用命令" class="headerlink" title="Kaggle 数据竞赛常用命令"></a>Kaggle 数据竞赛常用命令</h2><ul><li><code>pandas.Series.factorize()</code>：返回一个 tuple，对于数据的某一列为种类属性，将里面的类别映射成数字:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">0</span>]: labels, uniques = pd.factorize([<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: labels</span><br><span class="line">Out[<span class="number">1</span>]: array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: uniques</span><br><span class="line">Out[<span class="number">2</span>]: array([<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>], dtype=object)</span><br></pre></td></tr></table></figure>这个命令一般用于数据探索阶段，例如当给定的数据不知道是否为 categorical 类型的数据时，可以先进行一个映射：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Label encoder</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> train.columns[train.dtypes == <span class="string">'object'</span>]:</span><br><span class="line">    X[c] = X[c].factorize()[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li>将训练集中的特征进行区分：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat_cols = list(train.select_dtypes(include=[<span class="string">'object'</span>]).columns)</span><br><span class="line">num_cols = list(train.select_dtypes(exclude=[<span class="string">'object'</span>]).columns)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A powerful Python data analysis toolkit”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 使用方法记录</title>
    <link href="https://blog.yanghn.com/posts/54421/"/>
    <id>https://blog.yanghn.com/posts/54421/</id>
    <published>2019-02-20T09:42:42.000Z</published>
    <updated>2019-04-10T06:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“A web-based application suitable for capturing the whole computation process.”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-20-090019.jpg" alt="" style="width:80%"></p><a id="more"></a><h2 id="Jupyter-Notebook-简介"><a href="#Jupyter-Notebook-简介" class="headerlink" title="Jupyter Notebook 简介"></a>Jupyter Notebook 简介</h2><p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，而 Jupyter这个名字是它要服务的三种语言的缩写：Julia，Python 和 R，这个名字与 “木星（Jupiter）” 谐音。而 Jupyter Notebook 最早是为了支持 Python 设计的，目前为止支持运行 40 多种编程语言。</p><p>其本质是一个 Web 应用程序，便于创建和共享程序文档，支持实时代码的运行。而且非常适合用来做流式的数据分析和尝试性的程序编写。而在普通的 Python shell 或者在 IDE（集成开发环境）如 Pycharm 中写代码会显得更加繁琐。</p><p>作为一个 Web 应用程序，还可以实现远程服务器访问，也就是说可以配置jupyter 服务器来实现远程浏览器登录，还可以支持多人团队的 Jupyter Hub 实现服务器资源分配，关于 jupyter 远程登录可以参考<a href="https://www.e-learn.cn/content/qita/1390519" target="_blank" rel="noopener">这篇</a>文章，前提是服务器必须有公网 IP，若没有，可以参考各种内网穿透的方法。</p><div class="note primary"><p>作为 Web 服务器，若 8888 端口没有占用，Jupyter Notebook 会默认将 8888 设定为通信端口，若占用，则会将端口号 +1，有的时候在 shell 内无法停止端口占用，可以手动停止端口占用以免浪费端口。<br>这里以 Windows 为例：例如要停止 8889 端口，则可以在 cmd 下输入 <code>netstat -aon|findstr &quot;8889&quot;</code> 找到对应的 PID，然后在任务管理器下结束对应 PID 的进程，即可完成端口释放。</p></div><p>另外，Jupyter Notebook 非常适合作为教学工具，因为 markdown 的支持极大地丰富了文字表现力，现在 也有人将技术教学视频“翻译”成可执行的 <code>.ipynb</code> 文档，在类 IDE 环境中边看视频边实操运行代码。如 <a href="http://momodel.cn" target="_blank" rel="noopener">Mo 平台</a></p><h2 id="笔记本扩展功能"><a href="#笔记本扩展功能" class="headerlink" title="笔记本扩展功能"></a>笔记本扩展功能</h2><div class="note primary"><p>笔记本扩展（nbextensions）是一种 JavaScript模块，可以加载到笔记本前端页面上，可以大大提升效率。</p></div><p>安装时需要用到conda：<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge jupyter_nbextensions_configurator</span><br></pre></td></tr></table></figure><p></p><p>总之，安装合适的扩展功能可以极大地方便代码书写。</p><h2 id="Jupyter-NoteBook-的快捷键"><a href="#Jupyter-NoteBook-的快捷键" class="headerlink" title="Jupyter NoteBook 的快捷键"></a>Jupyter NoteBook 的快捷键</h2><p>Jupyter在顶部的菜单里保留了许多快捷键：<code>Help &gt; keyboard Shortcuts</code>. 每次更新Jupyter时，都值得再次进行查看，因为新的快捷键总是不断被添加进来。</p><p>查看快捷键的方式是使用命令面板：<code>Cmd</code> + <code>Shift</code> + <code>P</code> （或者 Linux 和Windows上 <code>Ctrl</code>+ <code>Shift</code> + <code>P</code>）</p><p>Jupyter Notebook 有两种键盘输入模式。即命令模式和编辑模式，这与 <a href="http://www.vim.org/" target="_blank" rel="noopener">Vim</a> 有些类似。在编辑模式下，可以往单元中键入代码或文本，此时单元格被绿色的框线包围，且命令模式下的快捷键不生效。在命令模式下，可以用快捷键命令运行单元格，移动单元格，切换单元格编辑状态等等，此时的单元格被灰色的框线包围，且编辑模式下的快捷键不生效。</p><div class="note primary"><p>从命令模式进入编辑模式需按 <code>Enter</code> 键，从编辑模式切换到命令模式需按 <code>Esc</code> 键。</p></div><span class="label success">命令模式快捷键（按 `Esc` 键开启）:</span><ul><li>在当前 cell 下方创建新的 cell：<code>A</code></li><li>在当前 cell 上方创建新的 cell：<code>B</code></li><li>删除选中的单元：连续按两个 <code>D</code></li><li>进入 Markdown 状态：<code>M</code></li><li>恢复最后一个被删除的 cell：<code>Z</code></li></ul><span class="label success">编辑模式快捷键（ 按 Enter 键启动）:</span><ul><li>给出当前函数提示：<code>Shift</code> + <code>Tab</code></li><li>注释（反注释）当前的代码行：<code>Ctrl</code> + <code>/</code></li><li>删除当前光标的全部文字：<code>Command</code> + <code>Delete</code></li></ul><h2 id="常用的-Jupyter-Magic"><a href="#常用的-Jupyter-Magic" class="headerlink" title="常用的 Jupyter Magic"></a>常用的 Jupyter Magic</h2><p>常用的 Jupyter Magic 魔法方法总结</p><ul><li><code>%load test.py</code>：将当前路径下 <code>test.py</code> 载入到 jupyter 的当前 cell 中</li><li><code>%reset -f</code>：清除所有已经定义过的变量</li><li><code>%%writefile filename.py</code>：写在 cell 的开头，运行时保存为 <code>filename.py</code> 文件，路径默认为当前工作路径</li><li>cell 内画图：<code>%matplotlib inline</code></li><li>使得 cell 内输出图形为矢量图：<code>%config InlineBackend.figure_format = &#39;svg&#39;</code></li><li><code>%store data</code>: 保存 <code>data</code> 变量到磁盘，可以用在不同的 NoteBook 之间传递变量，适合短期保存（可 pickle 化的）数据</li><li><code>%store</code>: 查看已保存的变量</li><li><code>%store -r</code>: 从磁盘里已保存好的文件更新现在所有的变量，会覆盖当前同名的变量</li><li><code>%store -r data</code>: 更新覆盖某一个变量</li><li><code>%store -d data</code>: 移除已保存的 <code>data</code></li><li><code>%store -z</code>: 移除全部保存的的变量</li></ul><div class="note warning"><p>变量保存在 <code>~/.ipython/profile_default/db/autorestore/&lt;variable_name&gt;</code> ，<code>~</code> 指 home 文件夹，并不适合用于资料的长期保存，可能会受到版本迭代的影响.</p></div><h3 id="利用魔法命令进行-Python-代码分析"><a href="#利用魔法命令进行-Python-代码分析" class="headerlink" title="利用魔法命令进行 Python 代码分析"></a>利用魔法命令进行 Python 代码分析</h3><ul><li><code>%timeit</code>: 对某一行语句多次重复计算代码运算时间，多于较慢的命令会自动调整重复次数，<a href="http://docs.python.org/library/timeit.html#timeit.Timer.timeit" target="_blank" rel="noopener">其中在底层做了一些聪明的事情来阻止系统的垃圾回收</a>，所以 <code>%timeit</code> 通常比 <code>%time</code> 得到更短的时间</li><li><code>%time</code>: 对某一行语句多次重复计算代码运算时间，主要关心 <code>Wall time</code></li><li><code>%%timeit</code>、<code>%%time</code>: 对整个代码块计时</li><li><code>%prun</code>: 对每行单独计算时间分析，返回时间统计表</li><li><code>%who_ls</code>: 查看当前命名空间内的全部变量</li><li><code>%reset_selective -f regex</code>: 清除变量名称符合正则表达式的变量，<code>-f</code> 表示不询问强制执行.</li><li><code>%reset -f</code> : <code>清除所有变量</code></li></ul><h2 id="升级到-Jupyter-Lab！"><a href="#升级到-Jupyter-Lab！" class="headerlink" title="升级到 Jupyter Lab！"></a>升级到 Jupyter Lab！</h2><p><a href="https://jupyterlab.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">JupyterLab</a> 是 Jupyter Notebook 的下一代产品，集成了更多功能。越来越像一个 类似于 MATLAB 的 IDE，目前开发到 0.35 版本，已经可以使用而且非常强大，据官网说法，当 1.0.0 版本出来之时，就会取代 jupyter notebook.</p><p>将服务器升级为 Jupyter Lab 非常简单，只需要在服务器上安装好后在shell 内输入 <code>jupyter lab</code>, 原来 Notebook 的设置完全不改变，远程输入服务器地址即可访问 Jupyter Lab.</p><p>JupyterLab 最大的好处就在于，<span class="label info">对于多个 Notebook 可以使用同一个 Kernel</span> ，也就是说，数据科学家需要一边尝试一边写核心代码，这样可以分开为两个 Notebook 而不显得凌乱.</p><div class="note warning"><p>Jupyter Lab 无法兼容原来 NoteBook 的插件，需要额外安装 Jupyter Lab 插件，更多插件请参考 <a href="https://github.com/jupyterlab/jupyter-renderers" target="_blank" rel="noopener">Jupyter Renderers</a></p><p>Notes:</p><ul><li>查看所安装的插件可以运行 <code>jupyter labextension list</code></li><li>卸载某插件可以用 <code>jupyter labextension uninstall</code>，例如：<br><code>jupyter labextension uninstall @jupyterlab/plotly-extension</code></li></ul></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="http://liuchengxu.org/pelican-blog/category/general.html" target="_blank" rel="noopener">[译] 27 个 Jupyter Notebook的小提示与技巧 | Focus on ML &amp; DM</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://www.zybuluo.com/hanxiaoyang/note/534296" target="_blank" rel="noopener">Jupyter Notebook的27个秘诀，技巧和快捷键 | 作业部落 Cmd Markdown 编辑阅读器</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top"><a href="http://blog.rexking6.top/2018/12/20/JupyterLab%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">JupyterLab插件 | RexKing6’s Note</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“A web-based application suitable for capturing the whole computation process.”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-03-20-090019.jpg&quot; alt=&quot;&quot; style=&quot;width:80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jupyter" scheme="https://blog.yanghn.com/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 文字排版全纪录</title>
    <link href="https://blog.yanghn.com/posts/40915/"/>
    <id>https://blog.yanghn.com/posts/40915/</id>
    <published>2019-01-17T03:12:24.000Z</published>
    <updated>2019-04-07T14:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<p class="description">“再好的表达能力也需要精致的排版技巧”</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-02-21-134236.jpg" alt="" style="width:80%"></p><a id="more"></a><h2 id="为什么使用-Hexo-排版"><a href="#为什么使用-Hexo-排版" class="headerlink" title="为什么使用 Hexo 排版"></a>为什么使用 Hexo 排版</h2><p>hexo 是使用 Markdown 语言作为主要书写语言，其目的是通过简单、易读易写的文本格式生成结构化的 HTML 文档，<span class="label warning">所以 Markdown 是兼容 HTML 的</span>。</p><p>虽然一些基本的语法在各种 Markdown 书写软件是支持的，但是不同的软件支持的广度又不一样，例如 Github Flavored Markdown (GFM) 语法不支持 Markdown 注脚，这会造成易用性的困难，Hexo 可以很好地解决这个排版问题，例如可以通过安装相应的插件实现。</p><p>这里推荐 Markdown 软件 <a href="https://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a>，可以很好的支持静态博客的生成，还可以将笔记发布到印象笔记，可以说非常方便。</p><p>利用 <code>hexo server</code> 进入<a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="noopener">调试模式</a>，左边网页实时渲染 <code>control+R</code> 刷新，右边 书写 Markdown <code>control+S</code> 保存，必要时可以利用移动设备局域网下访问站点或利用 Chrome 调试成移动端观察渲染效果。</p><p><img src="http://hnyang.oss-cn-shanghai.aliyuncs.com/2019-01-17-Hexo%20%E6%8E%92%E7%89%88%E5%85%A8%E7%BA%AA%E5%BD%95-1.png" alt=""></p><p>也有人将这种写作方式制作成一个后端管理工具，例如 <a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">hexo admin</a>，不过相比直接网页渲染，所支持的渲染效果并不好.</p><div class="note info"><h4 id="2019-03-20-更新！"><a href="#2019-03-20-更新！" class="headerlink" title="2019-03-20 更新！"></a>2019-03-20 更新！</h4><p>在 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a> 面前，一切都是那么的弱小！</p></div><h2 id="Hexo-文章模板文件"><a href="#Hexo-文章模板文件" class="headerlink" title="Hexo 文章模板文件"></a>Hexo 文章模板文件</h2><p>如果你是在站点文件夹根目录用 <code>hexo new post &lt;title&gt;</code> 新建的文章，那么其实它就是将文章的模版文件 <code>post.md</code>「复制」了一份到 <code>~/blog/source/_posts/</code> 下，所以这也意味着：</p><ol><li>你可以通过命令行的方式创建模板样式的 <code>.md</code> 文件。</li><li>你可以直接通过在 <code>~/blog/source/_posts/</code> 下新建 <code>.md</code> 结尾的文件来写新的文章。</li></ol><div class="note primary"><p>为了美观起见，英文和中文之间必须添加空格</p></div>首先这里附上我的模板文件<figure class="highlight md"><figcaption><span>文件位置：~/hexo/blog/scaffolds/post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">permalink:</span><br><span class="line">categories:</span><br><span class="line">tags: []</span><br><span class="line">description:</span><br><span class="line">mathjax: </span><br><span class="line">---</span><br><span class="line">&lt;p class="description"&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src="" alt="" style="width:85%" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line"><span class="section">##</span></span><br><span class="line"></span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">&#123;% note success no-icon %&#125; &lt;center&gt;本文更新于  &lt;/center&gt;&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note danger"><p>Tips: 这个地方写作时若直接插入上面 Markdown 代码，<code>{{ title }}</code>、<code>{{ date }}</code> 的部分会被转义，所以应该在代码中间插入 <code>{% raw %}{% endraw %}</code> 防止被转义。</p></div><p>下面逐一解释上述模板文件</p><ul><li>以 <code>---</code>分隔的区域，叫做 <a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">Front-matter</a> ，是用于指定此文件所包含的变量，具体变量实现可以百度搜索了解</li><li>Hexo 会自动识别 <code>&lt;!-- more --&gt;</code> 部分为摘要，也就是表现在首页部分，一般来说，为了美观起见，<span class="label warning">首页都是一句话加上一张图片</span>排版，这句话写在 <code>&lt;p&gt;&lt;/p&gt;</code> 标签内，<code>src</code> 插入图片的 url 链接。</li><li><span class="label warning">正文中所有的标题都是从二级标题开始</span>。</li><li>最后插入 <code>&lt;hr /&gt;</code> 横线表示文章结束，从后面可以插入参考文献。</li><li>最后插入本文的修改时间，技术总是会随着时间更新，提示读者本文的最后修改时间。</li></ul><p>当然，文章摘要还需要在 <code>_custom.styl</code> 下插入一些自定义 CSS 样式，代码如下：</p><figure class="highlight diff"><figcaption><span>文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 文章的描述description</span></span><br><span class="line"><span class="addition">+ .posts-expand .post-meta .post-description &#123;</span></span><br><span class="line"><span class="addition">+     font-style: italic;</span></span><br><span class="line"><span class="addition">+     font-size: 14px;</span></span><br><span class="line"><span class="addition">+     margin-top: 30px;</span></span><br><span class="line"><span class="addition">+     margin-bottom: 0px;</span></span><br><span class="line"><span class="addition">+     color: #666;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ // 自定义替代description的样式</span></span><br><span class="line"><span class="addition">+ p.description&#123;</span></span><br><span class="line"><span class="addition">+     text-align: center;</span></span><br><span class="line"><span class="addition">+     font-size: 14px;</span></span><br><span class="line"><span class="addition">+     font-style: italic;</span></span><br><span class="line"><span class="addition">+     color: #666;</span></span><br><span class="line"><span class="addition">+     margin-top: 30px;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><div class="note info"><p>红色 <code>-</code> 和绿色 <code>+</code> 的样式哪来的？哈哈哈，原来这也是一种语言，叫 <code>diff</code>，所以你只需在 <code>[language]</code> 这写 <code>diff</code>，然后在相应代码前面加上 <code>-</code> 和 <code>+</code> 就行了。不过默认的 <code>-</code> 是绿色，<code>+</code> 是红色，与 GitHub 上相反，别扭就自己改成 GitHub 的，在 <code>custom.styl</code> 加入以下代码</p></div><figure class="highlight diff"><figcaption><span>文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ // 文章```代码块diff样式</span></span><br><span class="line"><span class="addition">+ pre .addition &#123;</span></span><br><span class="line"><span class="addition">+     background: #e6ffed;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"><span class="addition">+ pre .deletion &#123;</span></span><br><span class="line"><span class="addition">+     background: #ffeef0;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br></pre></td></tr></table></figure><h2 id="段内文字格式"><a href="#段内文字格式" class="headerlink" title="段内文字格式"></a>段内文字格式</h2><p>Hexo 中基本的 Markdown 语法手册可以参考这篇博文 <a href="https://hyxxsfwy.github.io/2016/01/15/Hexo-Markdown-%E7%AE%80%E6%98%8E%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">Hexo Markdown 简明语法手册 | Mobilicorpus</a>，如果有些用 Markdwon 的语法却达不到预期效果（甚至产生奇怪的 bugs），或者用 Markdwon 的语法无法实现，这时就可以考虑用 HTML 和 CSS。</p><p>下面是比较常见的，难以用 Markdwon 的语法实现的 HTML 语言：</p><table><thead><tr><th style="text-align:center">样式</th><th style="text-align:center">代码</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">分隔线</td><td style="text-align:center"><code>&lt;hr /&gt;</code></td><td style="text-align:center"><hr></td></tr><tr><td style="text-align:center">引用</td><td style="text-align:center"><code>&lt;blockquote&gt;引用内容&lt;/blockquote&gt;</code></td><td style="text-align:center"><blockquote>引用内容</blockquote></td></tr><tr><td style="text-align:center">更宽的引用</td><td style="text-align:center"><code>&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt;</code></td><td style="text-align:center"><p></p><blockquote>引用内容</blockquote><p></p></td></tr><tr><td style="text-align:center">居中</td><td style="text-align:center"><code>&lt;center&gt;内容&lt;/center&gt;</code></td><td style="text-align:center"><center>内容</center></td></tr><tr><td style="text-align:center">右对齐</td><td style="text-align:center"><code>&lt;p style=&quot;text-align:right&quot;&gt;内容&lt;/p&gt;</code></td><td style="text-align:center"><p style="text-align:right">内容</p></td></tr><tr><td style="text-align:center">左对齐</td><td style="text-align:center"><code>&lt;p style=&quot;text-align:left&quot;&gt;内容&lt;/p&gt;</code></td><td style="text-align:center"><p style="text-align:left">内容</p></td></tr><tr><td style="text-align:center">字体大小和颜色<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></td><td style="text-align:center"><code>&lt;font color=&quot;red&quot; size=&quot;1&quot;&gt;内容&lt;/font&gt;</code></td><td style="text-align:center"><font color="red" size="2">内容</font></td></tr><tr><td style="text-align:center">黄色荧光笔</td><td style="text-align:center"><code>&lt;mark&gt;内容&lt;/mark&gt;</code></td><td style="text-align:center"><mark>内容</mark></td></tr></tbody></table><h3 id="Bootstrap-Callout2"><a href="#Bootstrap-Callout2" class="headerlink" title="Bootstrap Callout2"></a>Bootstrap Callout<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3><p>本站用的是 Next 主题，其配备了一些自带的主题样式，需要在<span class="label warning">主题配置文件</span> 中开启：</p><figure class="highlight yml"><figcaption><span>文件位置：~/hexo/blog/themes/next/config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line"><span class="attr">  style:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">  icons:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="attr">  light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>可以获得类似 beamer 中的 block 样式：<br></p><div class="note danger"><h4 id="This-is-a-note"><a href="#This-is-a-note" class="headerlink" title="This is a note"></a>This is a note</h4><p>note text<br>note text</p></div><p></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### This is a note</span><br><span class="line">note text</span><br><span class="line">note text</span><br><span class="line">&#123;% endnote %&#125; </span><br></pre></td></tr></table></figure><p></p><div class="note primary"><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>可以在 <code>danger</code> 后面加上 <code>no-icon</code> 实现去掉旁边的 icon，这个地方我用了四级标题 <code>####</code>，避免歧义，左侧导航栏没有显示，在主题配置文件 <code>toc</code> 选项可以修改，同样，在附上这段代码时,同样加上 <code>{% raw %}{% endraw %}</code>，防止被转义。</p></div><p>还有一种 label 样式，所谓的 label 从效果上看神似荧光笔，例如：</p><ol><li>这是<span class="label default">default</span></li><li>这是<span class="label primary">primary</span></li><li>这是<span class="label success">success</span></li><li>这是<span class="label info">info</span></li><li>这是<span class="label warning">warning</span></li><li>这是<span class="label danger">danger</span></li><li>这是有删除线的<del><span class="label danger">danger</span></del></li></ol><p>相应的代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label default@default%&#125;</span><br><span class="line">&#123;% label primary@primary%&#125;</span><br><span class="line">&#123;% label success@success%&#125;</span><br><span class="line">&#123;% label info@info%&#125;</span><br><span class="line">&#123;% label warning@warning%&#125;</span><br><span class="line">&#123;% label danger@danger%&#125;</span><br><span class="line">~~&#123;% label danger@danger%&#125;~~ </span><br></pre></td></tr></table></figure><p></p><h3 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h3><p>在主题配置文件可以开启代码自动高亮功能，代码按照以下格式给出<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [line_number:(true|false)] [highlight:(true|false)] [first_line:number] [mark:#,#-#] %&#125;</span><br><span class="line">YOUR CODE HERE</span><br><span class="line">&#123;% endcodeblock %&#125; </span><br></pre></td></tr></table></figure><p></p><ul><li><code>title</code> 是代码名称，一般为此段代码所在的文件路径；</li><li><code>language</code> 是代码语言的名称，用来设置代码块颜色高亮，纯文本用 <code>plain</code>；</li><li><code>url</code> 是文件所在的超链接地址；</li><li><code>link text</code> 如它的字面意思，超链接的名称；</li></ul><div class="note warning no-icon"><p>注意：这四个参数都不是必须的，若不指定代码语言开启自动高亮后则会自动为代码高亮</p></div><p><mark>更多内置标签插件样式参考 <a href="https://hexo.io/zh-cn/docs/tag-plugins#" target="_blank" rel="noopener">标签插件</a></mark></p><h2 id="段间排版"><a href="#段间排版" class="headerlink" title="段间排版"></a>段间排版</h2><p>对于中文排版，常用的排版方式分为两种，一种是首段空两格，段间距等于行间距，这种方式叫做段首缩排（下图左一）。还有一种是段首不进行缩进，段间距大于行间距，叫做段间距式（下图左二）。</p><p><img src="https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-02-21-134236.jpg" alt="文字的排版方式"></p><p>书籍印刷的表现要求是专注文字内容，因此阅读体验应当置于美观之上。由于段间距比段首缩排的分离程度更大，一字连一字阅读时易产生隔阂感、停顿感，故段首缩排与之相比更为优雅，有着更好的阅读体验。</p><p>对于网页，与纸质书的翻页不同，它是竖直方向的连续滚动。当网页快速滚动时，就使段落上下相连的段首缩排显得繁密易懵，而段落上下间隔的段间距则显得结构简明。段首缩排在快速滚动的互联网时代显得混乱与不整齐，段间距也就比段首缩排更适合于网页，因为它更利于快速传达信息。</p><div class="note danger"><p>千万不要同时用段首缩排和段间距！(上图右一)，技术类文章用段间距排版（左二），文学类的文章用段首缩排（左一）！</p></div><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px">1.</span><span style="display:inline-block;vertical-align:top"><a href="http://www.w3school.com.cn/tags/tag_font.asp" target="_blank" rel="noopener">HTML <font>标签 | w3school</font></a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px">2.</span><span style="display:inline-block;vertical-align:top"><a href="https://theme-next.org/docs/tag-plugins/note/" target="_blank" rel="noopener">Note (Bootstrap Callout) | NexT</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display:inline-block;vertical-align:top;padding-right:10px">3.</span><span style="display:inline-block;vertical-align:top"><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 | reuixiy</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;“再好的表达能力也需要精致的排版技巧”&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://hnyang.oss-cn-shanghai.aliyuncs.com/2019-02-21-134236.jpg&quot; alt=&quot;&quot; style=&quot;width:80%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://blog.yanghn.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://blog.yanghn.com/tags/hexo/"/>
    
  </entry>
  
</feed>
