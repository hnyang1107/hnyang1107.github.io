<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo 文字排版全纪录]]></title>
    <url>%2F2019%2F01%2F17%2FHexo%20%E6%8E%92%E7%89%88%E5%85%A8%E7%BA%AA%E5%BD%95%2F</url>
    <content type="text"><![CDATA[再好的表达能力也需要精致的排版技巧为什么使用 Hexo 排版hexo 是使用 Markdown 语言作为主要书写语言，其目的是通过简单、易读易写的文本格式生成结构化的 HTML 文档，所以 Markdown 是兼容 HTML 的。虽然一些基本的语法在各种 Markdown 书写软件是支持的，但是不同的软件支持的广度又不一样，例如 Github Flavored Markdown (GFM) 语法不支持 Markdown 注脚，这会造成易用性的困难，Hexo 可以很好地解决这个排版问题，例如可以通过安装相应的插件实现。这里推荐 Markdown 软件 MWeb，可以很好的支持静态博客的生成，还可以将笔记发布到印象笔记，可以说非常方便。利用 hexo server 进入调试模式，左边网页实时渲染 control+R 刷新，右边 书写 Markdown control+S 保存，必要时可以利用移动设备局域网下访问站点或利用 Chrome 调试成移动端观察渲染效果。Hexo 文章模板文件如果你是在站点文件夹根目录用 hexo new post &lt;title&gt; 新建的文章，那么其实它就是将文章的模版文件 post.md「复制」了一份到 ~/blog/source/_posts/ 下，所以这也意味着：你可以通过命令行的方式创建模板样式的 .md 文件。你可以直接通过在 ~/blog/source/_posts/ 下新建 .md 结尾的文件来写新的文章。为了美观起见，英文和中文之间必须添加空格首先这里附上我的模板文件文件位置：~/hexo/blog/scaffolds/post.md1234567891011121314151617181920212223---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;permalink:categories:tags: []description:mathjax: ---&lt;p class="description"&gt;&lt;/p&gt;&lt;img src="" alt="" style="width:85%" /&gt;&lt;!-- more --&gt;######&lt;hr /&gt;&#123;% note success no-icon %&#125; &lt;center&gt;本文更新于 &lt;/center&gt;&#123;% endnote %&#125;Tips: 这个地方写作时若直接插入上面 Markdown 代码，{{ title }}、{{ date }} 的部分会被转义，所以应该在代码中间插入 {% raw %}{% endraw %} 防止被转义。下面逐一解释上述模板文件以 ---分隔的区域，叫做 Front-matter ，是用于指定此文件所包含的变量，具体变量实现可以百度搜索了解Hexo 会自动识别 &lt;!-- more --&gt; 部分为摘要，也就是表现在首页部分，一般来说，为了美观起见，首页都是一句话加上一张图片排版，这句话写在 &lt;p&gt;&lt;/p&gt; 标签内，src 插入图片的 url 链接。正文中所有的标题都是从二级标题开始。最后插入 &lt;hr /&gt; 横线表示文章结束，从后面可以插入参考文献。最后插入本文的修改时间，技术总是会随着时间更新，提示读者本文的最后修改时间。当然，文章摘要还需要在 _custom.styl 下插入一些自定义 CSS 样式，代码如下：文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl12345678910111213141516+ // 文章的描述description+ .posts-expand .post-meta .post-description &#123;+ font-style: italic;+ font-size: 14px;+ margin-top: 30px;+ margin-bottom: 0px;+ color: #666;+ &#125;+ // 自定义替代description的样式+ p.description&#123;+ text-align: center;+ font-size: 14px;+ font-style: italic;+ color: #666;+ margin-top: 30px;+ &#125;红色 - 和绿色 + 的样式哪来的？哈哈哈，原来这也是一种语言，叫 diff，所以你只需在 [language] 这写 diff，然后在相应代码前面加上 - 和 + 就行了。不过默认的 - 是绿色，+ 是红色，与 GitHub 上相反，别扭就自己改成 GitHub 的，在 custom.styl 加入以下代码文件位置：~/hexo/blog/themes/next/source/css/_custom/custom.styl1234567+ // 文章```代码块diff样式+ pre .addition &#123;+ background: #e6ffed;+ &#125;+ pre .deletion &#123;+ background: #ffeef0;+ &#125;段内文字格式Hexo 中基本的 Markdown 语法手册可以参考这篇博文 Hexo Markdown 简明语法手册 | Mobilicorpus，如果有些用 Markdwon 的语法却达不到预期效果（甚至产生奇怪的 bugs），或者用 Markdwon 的语法无法实现，这时就可以考虑用 HTML 和 CSS。下面是比较常见的，难以用 Markdwon 的语法实现的 HTML 语言：样式代码效果分隔线&lt;hr /&gt;引用&lt;blockquote&gt;引用内容&lt;/blockquote&gt;引用内容更宽的引用&lt;p&gt;&lt;blockquote&gt;引用内容&lt;/blockquote&gt;&lt;/p&gt;引用内容居中&lt;center&gt;内容&lt;/center&gt;内容右对齐&lt;p style=&quot;text-align:right&quot;&gt;内容&lt;/p&gt;内容左对齐&lt;p style=&quot;text-align:left&quot;&gt;内容&lt;/p&gt;内容字体大小和颜色1&lt;font color=&quot;red&quot; size=&quot;1&quot;&gt;内容&lt;/font&gt;内容黄色荧光笔&lt;mark&gt;内容&lt;/mark&gt;内容Bootstrap Callout2本站用的是 Next 主题，其配备了一些自带的主题样式，需要在主题配置文件 中开启：文件位置：~/hexo/blog/themes/next/config123456789101112note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: simple icons: false border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0可以获得类似 beamer 中的 block 样式：This is a notenote textnote text代码如下：&#123;% note danger %&#125;#### This is a notenote textnote text&#123;% endnote %&#125; 注意可以在 danger 后面加上 no-icon 实现去掉旁边的 icon，这个地方我用了四级标题 ####，避免歧义，左侧导航栏没有显示，在主题配置文件 toc 选项可以修改，同样，在附上这段代码时,同样加上 {% raw %}{% endraw %}，防止被转义。还有一种 label 样式，所谓的 label 从效果上看神似荧光笔，例如：这是default这是primary这是success这是info这是warning这是danger这是有删除线的danger相应的代码：1234567&#123;% label default@default%&#125;&#123;% label primary@primary%&#125;&#123;% label success@success%&#125;&#123;% label info@info%&#125;&#123;% label warning@warning%&#125;&#123;% label danger@danger%&#125;~~&#123;% label danger@danger%&#125;~~ 代码格式在主题配置文件可以开启代码自动高亮功能，代码按照以下格式给出123&#123;% codeblock [title] [lang:language] [url] [link text] [line_number:(true|false)] [highlight:(true|false)] [first_line:number] [mark:#,#-#] %&#125;YOUR CODE HERE&#123;% endcodeblock %&#125; title 是代码名称，一般为此段代码所在的文件路径；language 是代码语言的名称，用来设置代码块颜色高亮，纯文本用 plain；url 是文件所在的超链接地址；link text 如它的字面意思，超链接的名称；注意：这四个参数都不是必须的，若不指定代码语言开启自动高亮后则会自动为代码高亮更多内置标签插件样式参考 标签插件段间排版对于中文排版，常用的排版方式分为两种，一种是首段空两格，段间距等于行间距，这种方式叫做段首缩排（下图左一）。还有一种是段首不进行缩进，段间距大于行间距，叫做段间距式（下图左二）。书籍印刷的表现要求是专注文字内容，因此阅读体验应当置于美观之上。由于段间距比段首缩排的分离程度更大，一字连一字阅读时易产生隔阂感、停顿感，故段首缩排与之相比更为优雅，有着更好的阅读体验。对于网页，与纸质书的翻页不同，它是竖直方向的连续滚动。当网页快速滚动时，就使段落上下相连的段首缩排显得繁密易懵，而段落上下间隔的段间距则显得结构简明。段首缩排在快速滚动的互联网时代显得混乱与不整齐，段间距也就比段首缩排更适合于网页，因为它更利于快速传达信息。千万不要同时用段首缩排和段间距！(上图右一)，技术类文章用段间距排版（左二），文学类的文章用段首缩排（左一）！1.HTML 标签 | w3school ↩2.Note (Bootstrap Callout) | NexT ↩3.打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 | reuixiy ↩]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
